"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatequagga_scanner"]("main",{

/***/ "./Scanner.js":
/*!********************!*\
  !*** ./Scanner.js ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n/* unused harmony exports startQuagga, stopQuagga */\n/* harmony import */ var https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! https://cdn.jsdelivr.net/npm/quagga@0.12.1/dist/quagga.min.js */ \"https://cdn.jsdelivr.net/npm/quagga@0.12.1/dist/quagga.min.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__]);\nhttps_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = \"function\" == typeof Symbol ? Symbol : {}, i = o.iterator || \"@@iterator\", a = o.asyncIterator || \"@@asyncIterator\", u = o.toStringTag || \"@@toStringTag\"; function c(t, r, e, n) { Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, \"\"); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, \"_invoke\", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error(\"Generator is already running\"); if (4 === o) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = 3; var h = s(r, e, n); if (\"normal\" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } \"throw\" === h.type && (o = 4, n.method = \"throw\", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: \"normal\", arg: t.call(r, e) }; } catch (t) { return { type: \"throw\", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { [\"next\", \"throw\", \"return\"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if (\"throw\" !== c.type) { var h = c.arg, f = h.value; return f && \"object\" == _typeof(f) && n.call(f, \"__await\") ? r.resolve(f.__await).then(function (t) { e(\"next\", t, a, u); }, function (t) { e(\"throw\", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e(\"throw\", t, a, u); }); } u(c.arg); } var o; c(this, \"_invoke\", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, \"throw\" === n && r.i[\"return\"] && (e.method = \"return\", e.arg = t, d(r, e), \"throw\" === e.method) || \"return\" !== n && (e.method = \"throw\", e.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), f; var i = s(o, r.i, e.arg); if (\"throw\" === i.type) return e.method = \"throw\", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, \"return\" !== e.method && (e.method = \"next\", e.arg = t), e.delegate = null, f) : a : (e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = \"normal\", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if (\"function\" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, \"constructor\", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), c(GeneratorFunctionPrototype, u, GeneratorFunction.displayName = \"GeneratorFunction\"), r.isGeneratorFunction = function (t) { var r = \"function\" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || \"GeneratorFunction\" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, \"GeneratorFunction\")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, \"Generator\"), c(v, i, function () { return this; }), c(v, \"toString\", function () { return \"[object Generator]\"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) \"t\" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = \"throw\", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n(\"end\"), !1; if (!c && !h) throw Error(\"try statement without catch or finally\"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = \"next\", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && (\"break\" === t || \"continue\" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = \"next\", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, \"catch\": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if (\"throw\" === n.type) { var o = n.arg; m(e); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, \"next\" === this.method && (this.arg = t), f; } }, r; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n/* global Quagga */\n\n// Import Quagga from CDN\n\nvar isRunning = false;\nvar quaggaInitialized = false;\nfunction setStatus(msg) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var statusContainer = document.getElementById('status');\n  if (statusContainer) {\n    statusContainer.textContent = msg;\n    statusContainer.className = type ? \"status \".concat(type) : 'status';\n  }\n}\nfunction setResult(msg) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var resultContainer = document.getElementById('result');\n  if (resultContainer) {\n    resultContainer.textContent = msg;\n    resultContainer.className = type ? \"result \".concat(type) : 'result';\n  }\n}\nfunction populateDeviceSelect() {\n  var deviceSelect = document.getElementById('deviceSelect');\n  if (!deviceSelect) return;\n  navigator.mediaDevices.enumerateDevices().then(function (devices) {\n    var videoDevices = devices.filter(function (device) {\n      return device.kind === 'videoinput';\n    });\n    deviceSelect.innerHTML = '';\n    videoDevices.forEach(function (device) {\n      var option = document.createElement('option');\n      option.value = device.deviceId;\n      option.text = device.label || \"Camera \".concat(deviceSelect.length + 1);\n      deviceSelect.appendChild(option);\n    });\n    if (videoDevices.length === 0) {\n      var option = document.createElement('option');\n      option.text = 'No cameras found';\n      deviceSelect.appendChild(option);\n      deviceSelect.disabled = true;\n    }\n  })[\"catch\"](function (err) {\n    console.error('Error enumerating devices:', err);\n    var option = document.createElement('option');\n    option.text = 'Error loading cameras';\n    deviceSelect.innerHTML = '';\n    deviceSelect.appendChild(option);\n    deviceSelect.disabled = true;\n  });\n}\nfunction startQuagga() {\n  return _startQuagga.apply(this, arguments);\n}\nfunction _startQuagga() {\n  _startQuagga = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    var formatSelect, deviceSelect, config;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!(isRunning || quaggaInitialized)) {\n            _context3.next = 2;\n            break;\n          }\n          return _context3.abrupt(\"return\");\n        case 2:\n          _context3.prev = 2;\n          isRunning = true;\n          quaggaInitialized = true;\n          setStatus('Starting camera...', 'stripe');\n          setResult('No barcode detected');\n          formatSelect = document.getElementById('formatSelect');\n          deviceSelect = document.getElementById('deviceSelect'); // Request camera permission first\n          _context3.next = 11;\n          return navigator.mediaDevices.getUserMedia({\n            video: true\n          });\n        case 11:\n          config = {\n            inputStream: {\n              name: \"Live\",\n              type: \"LiveStream\",\n              target: document.querySelector('#interactive'),\n              constraints: {\n                deviceId: deviceSelect && deviceSelect.value ? deviceSelect.value : undefined,\n                facingMode: deviceSelect && deviceSelect.value ? undefined : \"environment\",\n                aspectRatio: {\n                  min: 1,\n                  max: 2\n                },\n                frameRate: {\n                  max: 30\n                }\n              },\n              area: {\n                // Only search for barcodes in the center of the image\n                top: \"0%\",\n                right: \"0%\",\n                left: \"0%\",\n                bottom: \"0%\"\n              },\n              singleChannel: false\n            },\n            decoder: {\n              readers: [formatSelect ? formatSelect.value : 'ean_13'],\n              multiple: false\n            },\n            locate: true,\n            locator: {\n              halfSample: true,\n              patchSize: \"medium\"\n            },\n            numOfWorkers: 4,\n            frequency: 10,\n            debug: false\n          };\n          https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].init(config, function (err) {\n            if (err) {\n              console.error('Camera initialization error:', err);\n              if (err.name === 'NotAllowedError') {\n                setStatus('Camera access denied. Please grant camera permissions.', 'error');\n              } else if (err.name === 'NotFoundError') {\n                setStatus('No camera found on this device.', 'error');\n              } else if (err.name === 'NotReadableError') {\n                setStatus('Camera is in use by another application.', 'error');\n              } else {\n                setStatus('Error initializing camera: ' + err.message, 'error');\n              }\n              setResult('Initialization failed', 'error');\n              isRunning = false;\n              quaggaInitialized = false;\n              return;\n            }\n            https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].start();\n            setStatus('Camera started. Aim at a barcode.', 'success');\n          });\n          https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].onDetected(function (result) {\n            if (result.codeResult && result.codeResult.code) {\n              setResult(\"Barcode Detected: \".concat(result.codeResult.code, \" (Format: \").concat(result.codeResult.format, \")\"), 'success');\n              setStatus('Barcode detected!', 'success');\n              stopQuagga();\n            }\n          });\n          https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].onProcessed(function (result) {\n            var drawingCtx = https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].canvas.ctx.overlay;\n            var drawingCanvas = https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].canvas.dom.overlay;\n            if (result) {\n              if (result.boxes) {\n                drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute(\"width\")), parseInt(drawingCanvas.getAttribute(\"height\")));\n                result.boxes.filter(function (box) {\n                  return box !== result.box;\n                }).forEach(function (box) {\n                  https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ImageDebug.drawPath(box, {\n                    x: 0,\n                    y: 1\n                  }, drawingCtx, {\n                    color: \"green\",\n                    lineWidth: 2\n                  });\n                });\n              }\n              if (result.box) {\n                https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ImageDebug.drawPath(result.box, {\n                  x: 0,\n                  y: 1\n                }, drawingCtx, {\n                  color: \"#00F\",\n                  lineWidth: 2\n                });\n              }\n              if (result.codeResult && result.codeResult.code) {\n                https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ImageDebug.drawPath(result.line, {\n                  x: 'x',\n                  y: 'y'\n                }, drawingCtx, {\n                  color: 'red',\n                  lineWidth: 3\n                });\n              }\n            }\n          });\n          _context3.next = 23;\n          break;\n        case 17:\n          _context3.prev = 17;\n          _context3.t0 = _context3[\"catch\"](2);\n          console.error('Error starting camera:', _context3.t0);\n          setStatus('Error starting camera: ' + _context3.t0.message, 'error');\n          isRunning = false;\n          quaggaInitialized = false;\n        case 23:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[2, 17]]);\n  }));\n  return _startQuagga.apply(this, arguments);\n}\nfunction stopQuagga() {\n  if (!isRunning) return;\n\n  // Remove event listeners\n  https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].offDetected();\n  https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].offProcessed();\n\n  // Stop the video stream\n  var videoElement = document.querySelector('#interactive video');\n  if (videoElement && videoElement.srcObject) {\n    var tracks = videoElement.srcObject.getTracks();\n    tracks.forEach(function (track) {\n      return track.stop();\n    });\n    videoElement.srcObject = null;\n  }\n\n  // Stop Quagga\n  https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].stop();\n\n  // Clear the viewport\n  var viewport = document.querySelector('#interactive');\n  if (viewport) {\n    var canvases = viewport.querySelectorAll('canvas');\n    canvases.forEach(function (canvas) {\n      var ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    });\n  }\n  setStatus('Camera stopped.', 'stripe');\n  isRunning = false;\n  quaggaInitialized = false;\n}\nfunction handleVisibilityChange() {\n  if (document.visibilityState === 'visible') {\n    startQuagga();\n  } else {\n    stopQuagga();\n  }\n}\ndocument.addEventListener('visibilitychange', handleVisibilityChange);\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  // Add barcode format selector if not present\n  if (!document.getElementById('formatSelect')) {\n    var formatSelect = document.createElement('select');\n    formatSelect.id = 'formatSelect';\n    formatSelect.innerHTML = \"\\n      <option value=\\\"ean_13\\\">EAN-13</option>\\n      <option value=\\\"ean_8\\\">EAN-8</option>\\n      <option value=\\\"upc_a\\\">UPC-A</option>\\n      <option value=\\\"upc_e\\\">UPC-E</option>\\n      <option value=\\\"code_128\\\">Code 128</option>\\n      <option value=\\\"code_39\\\">Code 39</option>\\n      <option value=\\\"code_39_vin\\\">Code 39 VIN</option>\\n      <option value=\\\"codabar\\\">Codabar</option>\\n      <option value=\\\"i2of5\\\">Interleaved 2 of 5</option>\\n      <option value=\\\"2of5\\\">Standard 2 of 5</option>\\n      <option value=\\\"code_93\\\">Code 93</option>\\n    \";\n    formatSelect.value = 'ean_13';\n    var controls = document.querySelector('.controls');\n    var _startButton = document.getElementById('startButton');\n    if (controls && _startButton) {\n      controls.insertBefore(formatSelect, _startButton);\n    }\n  }\n\n  // Populate camera devices\n  populateDeviceSelect();\n\n  // Add event listeners for camera control buttons\n  var startButton = document.getElementById('startButton');\n  var stopButton = document.getElementById('stopButton');\n  if (startButton) {\n    startButton.addEventListener('click', function () {\n      startQuagga();\n      startButton.disabled = true;\n      if (stopButton) stopButton.disabled = false;\n    });\n  }\n  if (stopButton) {\n    stopButton.addEventListener('click', function () {\n      stopQuagga();\n      stopButton.disabled = true;\n      if (startButton) startButton.disabled = false;\n    });\n  }\n});\n\nvar BarcodeScanner = /*#__PURE__*/function () {\n  function BarcodeScanner() {\n    var _this = this;\n    _classCallCheck(this, BarcodeScanner);\n    this.isInitialized = false;\n    this.isScanning = false;\n\n    // DOM Elements\n    this.startButton = document.getElementById('startButton');\n    this.stopButton = document.getElementById('stopButton');\n    this.formatSelect = document.getElementById('formatSelect');\n    this.deviceSelect = document.getElementById('deviceSelect');\n    this.resultDiv = document.getElementById('result');\n    this.statusDiv = document.getElementById('status');\n\n    // Bind event listeners\n    this.startButton.addEventListener('click', function () {\n      return _this.startScanning();\n    });\n    this.stopButton.addEventListener('click', function () {\n      return _this.stopScanning();\n    });\n    this.formatSelect.addEventListener('change', function () {\n      return _this.updateConfig();\n    });\n\n    // Initialize camera devices\n    this.initializeCameraDevices();\n  }\n  return _createClass(BarcodeScanner, [{\n    key: \"initializeCameraDevices\",\n    value: function () {\n      var _initializeCameraDevices = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        var devices, videoDevices;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return navigator.mediaDevices.enumerateDevices();\n            case 3:\n              devices = _context.sent;\n              videoDevices = devices.filter(function (device) {\n                return device.kind === 'videoinput';\n              });\n              this.deviceSelect.innerHTML = videoDevices.map(function (device) {\n                return \"<option value=\\\"\".concat(device.deviceId, \"\\\">\").concat(device.label || \"Camera \".concat(device.deviceId), \"</option>\");\n              }).join('');\n              this.deviceSelect.addEventListener('change', function () {\n                return _this2.updateConfig();\n              });\n              this.statusDiv.textContent = 'Ready to scan';\n              this.statusDiv.className = 'success';\n              this.isInitialized = true;\n              _context.next = 17;\n              break;\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              this.statusDiv.textContent = 'Error accessing camera devices';\n              this.statusDiv.className = 'error';\n              console.error('Error accessing camera devices:', _context.t0);\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 12]]);\n      }));\n      function initializeCameraDevices() {\n        return _initializeCameraDevices.apply(this, arguments);\n      }\n      return initializeCameraDevices;\n    }()\n  }, {\n    key: \"getQuaggaConfig\",\n    value: function getQuaggaConfig() {\n      return {\n        inputStream: {\n          name: \"Live\",\n          type: \"LiveStream\",\n          target: document.querySelector(\"#interactive\"),\n          constraints: {\n            deviceId: this.deviceSelect.value,\n            facingMode: \"environment\"\n          }\n        },\n        decoder: {\n          readers: [this.formatSelect.value],\n          debug: {\n            drawBoundingBox: true,\n            showFrequency: true,\n            drawScanline: true,\n            showPattern: true\n          }\n        }\n      };\n    }\n  }, {\n    key: \"startScanning\",\n    value: function () {\n      var _startScanning = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(!this.isInitialized || this.isScanning)) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 2:\n              _context2.prev = 2;\n              _context2.next = 5;\n              return https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].init(this.getQuaggaConfig());\n            case 5:\n              https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].start();\n              this.isScanning = true;\n              this.startButton.disabled = true;\n              this.stopButton.disabled = false;\n              this.statusDiv.textContent = 'Scanning...';\n              this.statusDiv.className = 'stripe';\n              https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].onDetected(this.onBarcodeDetected.bind(this));\n              _context2.next = 19;\n              break;\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](2);\n              this.statusDiv.textContent = 'Error starting scanner';\n              this.statusDiv.className = 'error';\n              console.error('Error starting scanner:', _context2.t0);\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[2, 14]]);\n      }));\n      function startScanning() {\n        return _startScanning.apply(this, arguments);\n      }\n      return startScanning;\n    }()\n  }, {\n    key: \"stopScanning\",\n    value: function stopScanning() {\n      if (!this.isScanning) return;\n      https_cdn_jsdelivr_net_npm_quagga_0_12_1_dist_quagga_min_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].stop();\n      this.isScanning = false;\n      this.startButton.disabled = false;\n      this.stopButton.disabled = true;\n      this.statusDiv.textContent = 'Scanner stopped';\n      this.statusDiv.className = 'stripe';\n    }\n  }, {\n    key: \"updateConfig\",\n    value: function updateConfig() {\n      if (this.isScanning) {\n        this.stopScanning();\n        this.startScanning();\n      }\n    }\n  }, {\n    key: \"onBarcodeDetected\",\n    value: function onBarcodeDetected(result) {\n      if (result && result.codeResult) {\n        var code = result.codeResult.code;\n        this.resultDiv.textContent = \"Detected: \".concat(code);\n        this.resultDiv.className = 'success';\n\n        // Optional: Play a success sound\n        var audio = new Audio('data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjI5LjEwMAAAAAAAAAAAAAAA//OEAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAUAAAiSAAYGBgYJCQkJCQwMDAwMDw8PDw8SUlJSUlVVVVVVWFhYWFhbW1tbW15eXl5eYaGhoaGkpKSkpKenp6enqqqqqqqtra2trbDw8PDw8/Pz8/P29vb29vn5+fn5/Pz8/Pz//////8AAAAATGF2YzU4LjU0AAAAAAAAAAAAAAAAJAAAAAAAAAAAIkjG8J2NAAAAAAAAAAAAAAAAAAAAAP/zYMQAFNAFoVQAAAgAADSBUOMe4P4z/KBj/+EDUdxhOuoZHQYH6Bj/+oYgxjhD6Bj/+hqBqOUcwfQMf/1DkRvAP+MBoGP/6hiBqOUPwGP/6A3HKBoD6Bj/+oGP/4x/6Bj/+oY//4QAAAAAA09UVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zYsRAG8AFkVQBQBAAACqBoKoAVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV');\n        audio.play();\n      }\n    }\n  }]);\n}(); // Initialize the scanner when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function () {\n  new BarcodeScanner();\n});\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Scanner.js\n");

/***/ }),

/***/ "https://cdn.jsdelivr.net/npm/quagga@0.12.1/dist/quagga.min.js":
false

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/async module */
/******/ (() => {
/******/ 	var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 	var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 	var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 	var resolveQueue = (queue) => {
/******/ 		if(queue && queue.d < 1) {
/******/ 			queue.d = 1;
/******/ 			queue.forEach((fn) => (fn.r--));
/******/ 			queue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));
/******/ 		}
/******/ 	}
/******/ 	var wrapDeps = (deps) => (deps.map((dep) => {
/******/ 		if(dep !== null && typeof dep === "object") {
/******/ 			if(dep[webpackQueues]) return dep;
/******/ 			if(dep.then) {
/******/ 				var queue = [];
/******/ 				queue.d = 0;
/******/ 				dep.then((r) => {
/******/ 					obj[webpackExports] = r;
/******/ 					resolveQueue(queue);
/******/ 				}, (e) => {
/******/ 					obj[webpackError] = e;
/******/ 					resolveQueue(queue);
/******/ 				});
/******/ 				var obj = {};
/******/ 				obj[webpackQueues] = (fn) => (fn(queue));
/******/ 				return obj;
/******/ 			}
/******/ 		}
/******/ 		var ret = {};
/******/ 		ret[webpackQueues] = x => {};
/******/ 		ret[webpackExports] = dep;
/******/ 		return ret;
/******/ 	}));
/******/ 	__webpack_require__.a = (module, body, hasAwait) => {
/******/ 		var queue;
/******/ 		hasAwait && ((queue = []).d = -1);
/******/ 		var depQueues = new Set();
/******/ 		var exports = module.exports;
/******/ 		var currentDeps;
/******/ 		var outerResolve;
/******/ 		var reject;
/******/ 		var promise = new Promise((resolve, rej) => {
/******/ 			reject = rej;
/******/ 			outerResolve = resolve;
/******/ 		});
/******/ 		promise[webpackExports] = exports;
/******/ 		promise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise["catch"](x => {}));
/******/ 		module.exports = promise;
/******/ 		body((deps) => {
/******/ 			currentDeps = wrapDeps(deps);
/******/ 			var fn;
/******/ 			var getResult = () => (currentDeps.map((d) => {
/******/ 				if(d[webpackError]) throw d[webpackError];
/******/ 				return d[webpackExports];
/******/ 			}))
/******/ 			var promise = new Promise((resolve) => {
/******/ 				fn = () => (resolve(getResult));
/******/ 				fn.r = 0;
/******/ 				var fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));
/******/ 				currentDeps.map((dep) => (dep[webpackQueues](fnQueue)));
/******/ 			});
/******/ 			return fn.r ? promise : getResult();
/******/ 		}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));
/******/ 		queue && queue.d < 0 && (queue.d = 0);
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("82bbc3c3743b95fdfe3f")
/******/ })();
/******/ 
/******/ }
);