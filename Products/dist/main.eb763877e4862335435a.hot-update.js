/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatequagga_scanner"]("main",{

/***/ "./Scanner.js":
/*!********************!*\
  !*** ./Scanner.js ***!
  \********************/
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {

"use strict";
eval("/* harmony import */ var quagga__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! quagga */ \"./quaggaJS/dist/quagga.min.js\");\n/* harmony import */ var quagga__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(quagga__WEBPACK_IMPORTED_MODULE_0__);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = \"function\" == typeof Symbol ? Symbol : {}, i = o.iterator || \"@@iterator\", a = o.asyncIterator || \"@@asyncIterator\", u = o.toStringTag || \"@@toStringTag\"; function c(t, r, e, n) { Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, \"\"); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, \"_invoke\", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error(\"Generator is already running\"); if (4 === o) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = 3; var h = s(r, e, n); if (\"normal\" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } \"throw\" === h.type && (o = 4, n.method = \"throw\", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: \"normal\", arg: t.call(r, e) }; } catch (t) { return { type: \"throw\", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { [\"next\", \"throw\", \"return\"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if (\"throw\" !== c.type) { var h = c.arg, f = h.value; return f && \"object\" == _typeof(f) && n.call(f, \"__await\") ? r.resolve(f.__await).then(function (t) { e(\"next\", t, a, u); }, function (t) { e(\"throw\", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e(\"throw\", t, a, u); }); } u(c.arg); } var o; c(this, \"_invoke\", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, \"throw\" === n && r.i[\"return\"] && (e.method = \"return\", e.arg = t, d(r, e), \"throw\" === e.method) || \"return\" !== n && (e.method = \"throw\", e.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), f; var i = s(o, r.i, e.arg); if (\"throw\" === i.type) return e.method = \"throw\", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, \"return\" !== e.method && (e.method = \"next\", e.arg = t), e.delegate = null, f) : a : (e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = \"normal\", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if (\"function\" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, \"constructor\", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), c(GeneratorFunctionPrototype, u, GeneratorFunction.displayName = \"GeneratorFunction\"), r.isGeneratorFunction = function (t) { var r = \"function\" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || \"GeneratorFunction\" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, \"GeneratorFunction\")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, \"Generator\"), c(v, i, function () { return this; }), c(v, \"toString\", function () { return \"[object Generator]\"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) \"t\" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = \"throw\", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n(\"end\"), !1; if (!c && !h) throw Error(\"try statement without catch or finally\"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = \"next\", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && (\"break\" === t || \"continue\" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = \"next\", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, \"catch\": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if (\"throw\" === n.type) { var o = n.arg; m(e); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, \"next\" === this.method && (this.arg = t), f; } }, r; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/* global Quagga */\n\nvar BarcodeScanner = /*#__PURE__*/function () {\n  function BarcodeScanner() {\n    var _this = this;\n    _classCallCheck(this, BarcodeScanner);\n    this.statusElem = document.getElementById('status');\n    this.resultElem = document.getElementById('result');\n    this.startButton = document.getElementById('startButton');\n    this.stopButton = document.getElementById('stopButton');\n    this.deviceSelect = document.getElementById('deviceSelect');\n    this.formatSelect = document.getElementById('formatSelect');\n    this.isRunning = false;\n    this.startButton.addEventListener('click', function () {\n      return _this.startScanning();\n    });\n    this.stopButton.addEventListener('click', function () {\n      return _this.stopScanning();\n    });\n    this.deviceSelect.addEventListener('change', function () {\n      if (_this.isRunning) {\n        _this.stopScanning();\n        _this.startScanning();\n      }\n    });\n    this.formatSelect.addEventListener('change', function () {\n      if (_this.isRunning) {\n        _this.stopScanning();\n        _this.startScanning();\n      }\n    });\n    this.initializeCameraDevices();\n  }\n  return _createClass(BarcodeScanner, [{\n    key: \"initializeCameraDevices\",\n    value: function () {\n      var _initializeCameraDevices = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        var devices, videoDevices;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.setStatus('Requesting camera access...', 'stripe');\n              _context.prev = 1;\n              _context.next = 4;\n              return navigator.mediaDevices.enumerateDevices();\n            case 4:\n              devices = _context.sent;\n              videoDevices = devices.filter(function (device) {\n                return device.kind === 'videoinput';\n              });\n              this.deviceSelect.innerHTML = '';\n              videoDevices.forEach(function (device, idx) {\n                var option = document.createElement('option');\n                option.value = device.deviceId;\n                option.text = device.label || \"Camera \".concat(idx + 1);\n                _this2.deviceSelect.appendChild(option);\n              });\n              if (videoDevices.length === 0) {\n                this.setStatus('No camera devices found.', 'error');\n                this.startButton.disabled = true;\n              } else {\n                this.setStatus('Ready. Select camera and format.', 'success');\n                this.startButton.disabled = false;\n              }\n              _context.next = 15;\n              break;\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              this.setStatus('Error accessing camera devices.', 'error');\n              this.startButton.disabled = true;\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[1, 11]]);\n      }));\n      function initializeCameraDevices() {\n        return _initializeCameraDevices.apply(this, arguments);\n      }\n      return initializeCameraDevices;\n    }()\n  }, {\n    key: \"startScanning\",\n    value: function startScanning() {\n      var _this3 = this;\n      if (this.isRunning) return;\n      this.setStatus('Starting camera...', 'stripe');\n      this.resultElem.textContent = 'No barcode detected';\n      this.resultElem.className = '';\n      var selectedDeviceId = this.deviceSelect.value;\n      var selectedFormat = this.formatSelect.value;\n      quagga__WEBPACK_IMPORTED_MODULE_0___default().init({\n        inputStream: {\n          type: 'LiveStream',\n          constraints: {\n            width: {\n              min: 640\n            },\n            height: {\n              min: 480\n            },\n            facingMode: 'environment',\n            deviceId: selectedDeviceId ? {\n              exact: selectedDeviceId\n            } : undefined\n          },\n          target: document.getElementById('interactive')\n        },\n        decoder: {\n          readers: [selectedFormat + '_reader']\n        },\n        locate: true\n      }, function (err) {\n        if (err) {\n          _this3.setStatus('Error initializing camera: ' + err.message, 'error');\n          _this3.isRunning = false;\n          return;\n        }\n        quagga__WEBPACK_IMPORTED_MODULE_0___default().start();\n        _this3.isRunning = true;\n        _this3.setStatus('Scanning... Point camera at barcode.', 'success');\n        _this3.startButton.disabled = true;\n        _this3.stopButton.disabled = false;\n      });\n      quagga__WEBPACK_IMPORTED_MODULE_0___default().onDetected(this.onDetected = function (result) {\n        var code = result.codeResult.code;\n        _this3.resultElem.textContent = \"Detected: \".concat(code);\n        _this3.resultElem.className = 'success';\n        _this3.setStatus('Barcode detected!', 'success');\n        // Optionally stop after first detection:\n        // this.stopScanning();\n      });\n      quagga__WEBPACK_IMPORTED_MODULE_0___default().onProcessed(this.onProcessed = function (result) {\n        // Optionally, you can add drawing overlays here\n      });\n    }\n  }, {\n    key: \"stopScanning\",\n    value: function stopScanning() {\n      if (!this.isRunning) return;\n      quagga__WEBPACK_IMPORTED_MODULE_0___default().stop();\n      quagga__WEBPACK_IMPORTED_MODULE_0___default().offDetected(this.onDetected);\n      quagga__WEBPACK_IMPORTED_MODULE_0___default().offProcessed(this.onProcessed);\n      this.isRunning = false;\n      this.setStatus('Camera stopped.', 'stripe');\n      this.startButton.disabled = false;\n      this.stopButton.disabled = true;\n    }\n  }, {\n    key: \"setStatus\",\n    value: function setStatus(msg, type) {\n      this.statusElem.textContent = msg;\n      this.statusElem.className = type ? type : '';\n    }\n  }]);\n}();\ndocument.addEventListener('DOMContentLoaded', function () {\n  new BarcodeScanner();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Scanner.js\n");

/***/ }),

/***/ "./quaggaJS/dist/quagga.min.js":
/*!*************************************!*\
  !*** ./quaggaJS/dist/quagga.min.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n!function (t, e) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"object\" == ( false ? 0 : _typeof(module)) ? module.exports = e(e.toString())[\"default\"] : \"object\" == ( false ? 0 : _typeof(exports)) ? exports.Quagga = e(e.toString())[\"default\"] : t.Quagga = e(e.toString())[\"default\"];\n}(this, function (t) {\n  return function (t) {\n    function e(r) {\n      if (n[r]) return n[r].exports;\n      var o = n[r] = {\n        i: r,\n        l: !1,\n        exports: {}\n      };\n      return t[r].call(o.exports, o, o.exports, e), o.l = !0, o.exports;\n    }\n    var n = {};\n    return e.m = t, e.c = n, e.i = function (t) {\n      return t;\n    }, e.d = function (t, n, r) {\n      e.o(t, n) || Object.defineProperty(t, n, {\n        configurable: !1,\n        enumerable: !0,\n        get: r\n      });\n    }, e.n = function (t) {\n      var n = t && t.__esModule ? function () {\n        return t[\"default\"];\n      } : function () {\n        return t;\n      };\n      return e.d(n, \"a\", n), n;\n    }, e.o = function (t, e) {\n      return Object.prototype.hasOwnProperty.call(t, e);\n    }, e.p = \"/\", e(e.s = 166);\n  }([function (t, e) {\n    function n(t) {\n      var e = _typeof(t);\n      return null != t && (\"object\" == e || \"function\" == e);\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t, e) {\n      return this._row = [], this.config = t || {}, this.supplements = e, this;\n    }\n    var o = n(3);\n    r.prototype._nextUnset = function (t, e) {\n      var n;\n      for (void 0 === e && (e = 0), n = e; n < t.length; n++) if (!t[n]) return n;\n      return t.length;\n    }, r.prototype._matchPattern = function (t, e, n) {\n      var r,\n        o,\n        i,\n        a,\n        u = 0,\n        c = 0,\n        s = 0,\n        f = 0;\n      for (n = n || this.SINGLE_CODE_ERROR || 1, r = 0; r < t.length; r++) s += t[r], f += e[r];\n      if (s < f) return Number.MAX_VALUE;\n      for (o = s / f, n *= o, r = 0; r < t.length; r++) {\n        if (i = t[r], a = e[r] * o, (c = Math.abs(i - a) / a) > n) return Number.MAX_VALUE;\n        u += c;\n      }\n      return u / f;\n    }, r.prototype._nextSet = function (t, e) {\n      var n;\n      for (e = e || 0, n = e; n < t.length; n++) if (t[n]) return n;\n      return t.length;\n    }, r.prototype._correctBars = function (t, e, n) {\n      for (var r = n.length, o = 0; r--;) (o = t[n[r]] * (1 - (1 - e) / 2)) > 1 && (t[n[r]] = o);\n    }, r.prototype._matchTrace = function (t, e) {\n      var n,\n        r,\n        o = [],\n        i = this,\n        a = i._nextSet(i._row),\n        u = !i._row[a],\n        c = 0,\n        s = {\n          error: Number.MAX_VALUE,\n          code: -1,\n          start: 0\n        };\n      if (t) {\n        for (n = 0; n < t.length; n++) o.push(0);\n        for (n = a; n < i._row.length; n++) if (i._row[n] ^ u) o[c]++;else {\n          if (c === o.length - 1) return r = i._matchPattern(o, t), r < e ? (s.start = n - a, s.end = n, s.counter = o, s) : null;\n          c++, o[c] = 1, u = !u;\n        }\n      } else for (o.push(0), n = a; n < i._row.length; n++) i._row[n] ^ u ? o[c]++ : (c++, o.push(0), o[c] = 1, u = !u);\n      return s.start = a, s.end = i._row.length - 1, s.counter = o, s;\n    }, r.prototype.decodePattern = function (t) {\n      var e,\n        n = this;\n      return n._row = t, e = n._decode(), null === e ? (n._row.reverse(), (e = n._decode()) && (e.direction = r.DIRECTION.REVERSE, e.start = n._row.length - e.start, e.end = n._row.length - e.end)) : e.direction = r.DIRECTION.FORWARD, e && (e.format = n.FORMAT), e;\n    }, r.prototype._matchRange = function (t, e, n) {\n      var r;\n      for (t = t < 0 ? 0 : t, r = t; r < e; r++) if (this._row[r] !== n) return !1;\n      return !0;\n    }, r.prototype._fillCounters = function (t, e, n) {\n      var r,\n        o = this,\n        i = 0,\n        a = [];\n      for (n = void 0 === n || n, t = void 0 !== t ? t : o._nextUnset(o._row), e = e || o._row.length, a[i] = 0, r = t; r < e; r++) o._row[r] ^ n ? a[i]++ : (i++, a[i] = 1, n = !n);\n      return a;\n    }, r.prototype._toCounters = function (t, e) {\n      var n,\n        r = this,\n        i = e.length,\n        a = r._row.length,\n        u = !r._row[t],\n        c = 0;\n      for (o.a.init(e, 0), n = t; n < a; n++) if (r._row[n] ^ u) e[c]++;else {\n        if (++c === i) break;\n        e[c] = 1, u = !u;\n      }\n      return e;\n    }, Object.defineProperty(r.prototype, \"FORMAT\", {\n      value: \"unknown\",\n      writeable: !1\n    }), r.DIRECTION = {\n      FORWARD: 1,\n      REVERSE: -1\n    }, r.Exception = {\n      StartNotFoundException: \"Start-Info was not found!\",\n      CodeNotFoundException: \"Code could not be found!\",\n      PatternNotFoundException: \"Pattern could not be found!\"\n    }, r.CONFIG_KEYS = {}, e.a = r;\n  }, function (t, e) {\n    var n = Array.isArray;\n    t.exports = n;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    e.a = {\n      init: function init(t, e) {\n        for (var n = t.length; n--;) t[n] = e;\n      },\n      shuffle: function shuffle(t) {\n        var e,\n          n,\n          r = t.length - 1;\n        for (r; r >= 0; r--) e = Math.floor(Math.random() * r), n = t[r], t[r] = t[e], t[e] = n;\n        return t;\n      },\n      toPointList: function toPointList(t) {\n        var e,\n          n,\n          r = [],\n          o = [];\n        for (e = 0; e < t.length; e++) {\n          for (r = [], n = 0; n < t[e].length; n++) r[n] = t[e][n];\n          o[e] = \"[\" + r.join(\",\") + \"]\";\n        }\n        return \"[\" + o.join(\",\\r\\n\") + \"]\";\n      },\n      threshold: function threshold(t, e, n) {\n        var r,\n          o = [];\n        for (r = 0; r < t.length; r++) n.apply(t, [t[r]]) >= e && o.push(t[r]);\n        return o;\n      },\n      maxIndex: function maxIndex(t) {\n        var e,\n          n = 0;\n        for (e = 0; e < t.length; e++) t[e] > t[n] && (n = e);\n        return n;\n      },\n      max: function t(e) {\n        var n,\n          t = 0;\n        for (n = 0; n < e.length; n++) e[n] > t && (t = e[n]);\n        return t;\n      },\n      sum: function t(e) {\n        for (var n = e.length, t = 0; n--;) t += e[n];\n        return t;\n      }\n    };\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t, e) {\n      t = a()(o(), t), u.a.call(this, t, e);\n    }\n    function o() {\n      var t = {};\n      return Object.keys(r.CONFIG_KEYS).forEach(function (e) {\n        t[e] = r.CONFIG_KEYS[e][\"default\"];\n      }), t;\n    }\n    var i = n(28),\n      a = n.n(i),\n      u = n(1),\n      c = Object.assign || function (t) {\n        for (var e = 1; e < arguments.length; e++) {\n          var n = arguments[e];\n          for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);\n        }\n        return t;\n      },\n      s = {\n        CODE_L_START: {\n          value: 0\n        },\n        CODE_G_START: {\n          value: 10\n        },\n        START_PATTERN: {\n          value: [1, 1, 1]\n        },\n        STOP_PATTERN: {\n          value: [1, 1, 1]\n        },\n        MIDDLE_PATTERN: {\n          value: [1, 1, 1, 1, 1]\n        },\n        EXTENSION_START_PATTERN: {\n          value: [1, 1, 2]\n        },\n        CODE_PATTERN: {\n          value: [[3, 2, 1, 1], [2, 2, 2, 1], [2, 1, 2, 2], [1, 4, 1, 1], [1, 1, 3, 2], [1, 2, 3, 1], [1, 1, 1, 4], [1, 3, 1, 2], [1, 2, 1, 3], [3, 1, 1, 2], [1, 1, 2, 3], [1, 2, 2, 2], [2, 2, 1, 2], [1, 1, 4, 1], [2, 3, 1, 1], [1, 3, 2, 1], [4, 1, 1, 1], [2, 1, 3, 1], [3, 1, 2, 1], [2, 1, 1, 3]]\n        },\n        CODE_FREQUENCY: {\n          value: [0, 11, 13, 14, 19, 25, 28, 21, 22, 26]\n        },\n        SINGLE_CODE_ERROR: {\n          value: .7\n        },\n        AVG_CODE_ERROR: {\n          value: .48\n        },\n        FORMAT: {\n          value: \"ean_13\",\n          writeable: !1\n        }\n      };\n    r.prototype = Object.create(u.a.prototype, s), r.prototype.constructor = r, r.prototype._decodeCode = function (t, e) {\n      var n,\n        r,\n        o,\n        i = [0, 0, 0, 0],\n        a = this,\n        u = t,\n        c = !a._row[u],\n        s = 0,\n        f = {\n          error: Number.MAX_VALUE,\n          code: -1,\n          start: t,\n          end: t\n        };\n      for (e || (e = a.CODE_PATTERN.length), n = u; n < a._row.length; n++) if (a._row[n] ^ c) i[s]++;else {\n        if (s === i.length - 1) {\n          for (r = 0; r < e; r++) (o = a._matchPattern(i, a.CODE_PATTERN[r])) < f.error && (f.code = r, f.error = o);\n          return f.end = n, f.error > a.AVG_CODE_ERROR ? null : f;\n        }\n        s++, i[s] = 1, c = !c;\n      }\n      return null;\n    }, r.prototype._findPattern = function (t, e, n, r, o) {\n      var i,\n        a,\n        u,\n        c,\n        s = [],\n        f = this,\n        l = 0,\n        d = {\n          error: Number.MAX_VALUE,\n          code: -1,\n          start: 0,\n          end: 0\n        };\n      for (e || (e = f._nextSet(f._row)), void 0 === n && (n = !1), void 0 === r && (r = !0), void 0 === o && (o = f.AVG_CODE_ERROR), i = 0; i < t.length; i++) s[i] = 0;\n      for (i = e; i < f._row.length; i++) if (f._row[i] ^ n) s[l]++;else {\n        if (l === s.length - 1) {\n          for (c = 0, u = 0; u < s.length; u++) c += s[u];\n          if ((a = f._matchPattern(s, t)) < o) return d.error = a, d.start = i - c, d.end = i, d;\n          if (!r) return null;\n          for (u = 0; u < s.length - 2; u++) s[u] = s[u + 2];\n          s[s.length - 2] = 0, s[s.length - 1] = 0, l--;\n        } else l++;\n        s[l] = 1, n = !n;\n      }\n      return null;\n    }, r.prototype._findStart = function () {\n      for (var t, e, n = this, r = n._nextSet(n._row); !e;) {\n        if (!(e = n._findPattern(n.START_PATTERN, r))) return null;\n        if ((t = e.start - (e.end - e.start)) >= 0 && n._matchRange(t, e.start, 0)) return e;\n        r = e.end, e = null;\n      }\n    }, r.prototype._verifyTrailingWhitespace = function (t) {\n      var e,\n        n = this;\n      return e = t.end + (t.end - t.start), e < n._row.length && n._matchRange(t.end, e, 0) ? t : null;\n    }, r.prototype._findEnd = function (t, e) {\n      var n = this,\n        r = n._findPattern(n.STOP_PATTERN, t, e, !1);\n      return null !== r ? n._verifyTrailingWhitespace(r) : null;\n    }, r.prototype._calculateFirstDigit = function (t) {\n      var e,\n        n = this;\n      for (e = 0; e < n.CODE_FREQUENCY.length; e++) if (t === n.CODE_FREQUENCY[e]) return e;\n      return null;\n    }, r.prototype._decodePayload = function (t, e, n) {\n      var r,\n        o,\n        i = this,\n        a = 0;\n      for (r = 0; r < 6; r++) {\n        if (!(t = i._decodeCode(t.end))) return null;\n        t.code >= i.CODE_G_START ? (t.code = t.code - i.CODE_G_START, a |= 1 << 5 - r) : a |= 0 << 5 - r, e.push(t.code), n.push(t);\n      }\n      if (null === (o = i._calculateFirstDigit(a))) return null;\n      if (e.unshift(o), null === (t = i._findPattern(i.MIDDLE_PATTERN, t.end, !0, !1))) return null;\n      for (n.push(t), r = 0; r < 6; r++) {\n        if (!(t = i._decodeCode(t.end, i.CODE_G_START))) return null;\n        n.push(t), e.push(t.code);\n      }\n      return t;\n    }, r.prototype._decode = function () {\n      var t,\n        e,\n        n = this,\n        r = [],\n        o = [],\n        i = {};\n      if (!(t = n._findStart())) return null;\n      if (e = {\n        code: t.code,\n        start: t.start,\n        end: t.end\n      }, o.push(e), !(e = n._decodePayload(e, r, o))) return null;\n      if (!(e = n._findEnd(e.end, !1))) return null;\n      if (o.push(e), !n._checksum(r)) return null;\n      if (this.supplements.length > 0) {\n        var a = this._decodeExtensions(e.end);\n        if (!a) return null;\n        var u = a.decodedCodes[a.decodedCodes.length - 1],\n          s = {\n            start: u.start + ((u.end - u.start) / 2 | 0),\n            end: u.end\n          };\n        if (!n._verifyTrailingWhitespace(s)) return null;\n        i = {\n          supplement: a,\n          code: r.join(\"\") + a.code\n        };\n      }\n      return c({\n        code: r.join(\"\"),\n        start: t.start,\n        end: e.end,\n        codeset: \"\",\n        startInfo: t,\n        decodedCodes: o\n      }, i);\n    }, r.prototype._decodeExtensions = function (t) {\n      var e,\n        n,\n        r = this._nextSet(this._row, t),\n        o = this._findPattern(this.EXTENSION_START_PATTERN, r, !1, !1);\n      if (null === o) return null;\n      for (e = 0; e < this.supplements.length; e++) if (null !== (n = this.supplements[e].decode(this._row, o.end))) return {\n        code: n.code,\n        start: r,\n        startInfo: o,\n        end: n.end,\n        codeset: \"\",\n        decodedCodes: n.decodedCodes\n      };\n      return null;\n    }, r.prototype._checksum = function (t) {\n      var e,\n        n = 0;\n      for (e = t.length - 2; e >= 0; e -= 2) n += t[e];\n      for (n *= 3, e = t.length - 1; e >= 0; e -= 2) n += t[e];\n      return n % 10 == 0;\n    }, r.CONFIG_KEYS = {\n      supplements: {\n        type: \"arrayOf(string)\",\n        \"default\": [],\n        description: \"Allowed extensions to be decoded (2 and/or 5)\"\n      }\n    }, e.a = r;\n  }, function (t, e, n) {\n    var r = n(38),\n      o = \"object\" == (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self && self.Object === Object && self,\n      i = r || o || Function(\"return this\")();\n    t.exports = i;\n  }, function (t, e) {\n    function n(t) {\n      return null != t && \"object\" == _typeof(t);\n    }\n    t.exports = n;\n  }, function (t, e) {\n    function n(t) {\n      var e = new Float32Array(2);\n      return e[0] = t[0], e[1] = t[1], e;\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t) {\n      return null == t ? void 0 === t ? c : u : s && s in Object(t) ? i(t) : a(t);\n    }\n    var o = n(11),\n      i = n(119),\n      a = n(146),\n      u = \"[object Null]\",\n      c = \"[object Undefined]\",\n      s = o ? o.toStringTag : void 0;\n    t.exports = r;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    e.a = {\n      drawRect: function drawRect(t, e, n, r) {\n        n.strokeStyle = r.color, n.fillStyle = r.color, n.lineWidth = 1, n.beginPath(), n.strokeRect(t.x, t.y, e.x, e.y);\n      },\n      drawPath: function drawPath(t, e, n, r) {\n        n.strokeStyle = r.color, n.fillStyle = r.color, n.lineWidth = r.lineWidth, n.beginPath(), n.moveTo(t[0][e.x], t[0][e.y]);\n        for (var o = 1; o < t.length; o++) n.lineTo(t[o][e.x], t[o][e.y]);\n        n.closePath(), n.stroke();\n      },\n      drawImage: function drawImage(t, e, n) {\n        var r,\n          o = n.getImageData(0, 0, e.x, e.y),\n          i = o.data,\n          a = t.length,\n          u = i.length;\n        if (u / a != 4) return !1;\n        for (; a--;) r = t[a], i[--u] = 255, i[--u] = r, i[--u] = r, i[--u] = r;\n        return n.putImageData(o, 0, 0), !0;\n      }\n    };\n  }, function (t, e, n) {\n    function r(t) {\n      var e = -1,\n        n = null == t ? 0 : t.length;\n      for (this.clear(); ++e < n;) {\n        var r = t[e];\n        this.set(r[0], r[1]);\n      }\n    }\n    var o = n(133),\n      i = n(134),\n      a = n(135),\n      u = n(136),\n      c = n(137);\n    r.prototype.clear = o, r.prototype[\"delete\"] = i, r.prototype.get = a, r.prototype.has = u, r.prototype.set = c, t.exports = r;\n  }, function (t, e, n) {\n    var r = n(5),\n      o = r.Symbol;\n    t.exports = o;\n  }, function (t, e, n) {\n    function r(t, e) {\n      for (var n = t.length; n--;) if (o(t[n][0], e)) return n;\n      return -1;\n    }\n    var o = n(17);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e) {\n      return o(t) ? t : i(t, e) ? [t] : a(u(t));\n    }\n    var o = n(2),\n      i = n(130),\n      a = n(154),\n      u = n(165);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e) {\n      var n = t.__data__;\n      return o(e) ? n[\"string\" == typeof e ? \"string\" : \"hash\"] : n.map;\n    }\n    var o = n(131);\n    t.exports = r;\n  }, function (t, e) {\n    function n(t, e) {\n      return !!(e = null == e ? r : e) && (\"number\" == typeof t || o.test(t)) && t > -1 && t % 1 == 0 && t < e;\n    }\n    var r = 9007199254740991,\n      o = /^(?:0|[1-9]\\d*)$/;\n    t.exports = n;\n  }, function (t, e, n) {\n    var r = n(22),\n      o = r(Object, \"create\");\n    t.exports = o;\n  }, function (t, e) {\n    function n(t, e) {\n      return t === e || t !== t && e !== e;\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    var r = n(96),\n      o = n(6),\n      i = Object.prototype,\n      a = i.hasOwnProperty,\n      u = i.propertyIsEnumerable,\n      c = r(function () {\n        return arguments;\n      }()) ? r : function (t) {\n        return o(t) && a.call(t, \"callee\") && !u.call(t, \"callee\");\n      };\n    t.exports = c;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t, e) {\n      return {\n        x: t,\n        y: e,\n        toVec2: function toVec2() {\n          return b.clone([this.x, this.y]);\n        },\n        toVec3: function toVec3() {\n          return E.clone([this.x, this.y, 1]);\n        },\n        round: function round() {\n          return this.x = this.x > 0 ? Math.floor(this.x + .5) : Math.floor(this.x - .5), this.y = this.y > 0 ? Math.floor(this.y + .5) : Math.floor(this.y - .5), this;\n        }\n      };\n    }\n    function o(t, e, n) {\n      n || (n = t);\n      for (var r = t.data, o = r.length, i = n.data; o--;) i[o] = r[o] < e ? 1 : 0;\n    }\n    function i(t, e) {\n      e || (e = 8);\n      for (var n = t.data, r = n.length, o = 8 - e, i = 1 << e, a = new Int32Array(i); r--;) a[n[r] >> o]++;\n      return a;\n    }\n    function a(t, e) {\n      function n(t, e) {\n        var n,\n          r = 0;\n        for (n = t; n <= e; n++) r += a[n];\n        return r;\n      }\n      function r(t, e) {\n        var n,\n          r = 0;\n        for (n = t; n <= e; n++) r += n * a[n];\n        return r;\n      }\n      function o() {\n        var o,\n          u,\n          c,\n          s,\n          f,\n          l,\n          d,\n          h = [0],\n          p = (1 << e) - 1;\n        for (a = i(t, e), s = 1; s < p; s++) o = n(0, s), u = n(s + 1, p), c = o * u, 0 === c && (c = 1), f = r(0, s) * u, l = r(s + 1, p) * o, d = f - l, h[s] = d * d / c;\n        return x.a.maxIndex(h);\n      }\n      e || (e = 8);\n      var a,\n        u = 8 - e;\n      return o() << u;\n    }\n    function u(t, e) {\n      var n = a(t);\n      return o(t, n, e), n;\n    }\n    function c(t, e, n) {\n      function r(t) {\n        var e = !1;\n        for (i = 0; i < c.length; i++) a = c[i], a.fits(t) && (a.add(t), e = !0);\n        return e;\n      }\n      var o,\n        i,\n        a,\n        u,\n        c = [];\n      for (n || (n = \"rad\"), o = 0; o < t.length; o++) u = m.a.createPoint(t[o], o, n), r(u) || c.push(m.a.create(u, e));\n      return c;\n    }\n    function s(t, e, n) {\n      var r,\n        o,\n        i,\n        a,\n        u = 0,\n        c = 0,\n        s = [];\n      for (r = 0; r < e; r++) s[r] = {\n        score: 0,\n        item: null\n      };\n      for (r = 0; r < t.length; r++) if ((o = n.apply(this, [t[r]])) > c) for (i = s[u], i.score = o, i.item = t[r], c = Number.MAX_VALUE, a = 0; a < e; a++) s[a].score < c && (c = s[a].score, u = a);\n      return s;\n    }\n    function f(t, e, n) {\n      for (var r, o = 0, i = e.x, a = Math.floor(t.length / 4), u = e.x / 2, c = 0, s = e.x; i < a;) {\n        for (r = 0; r < u; r++) n[c] = (.299 * t[4 * o + 0] + .587 * t[4 * o + 1] + .114 * t[4 * o + 2] + (.299 * t[4 * (o + 1) + 0] + .587 * t[4 * (o + 1) + 1] + .114 * t[4 * (o + 1) + 2]) + (.299 * t[4 * i + 0] + .587 * t[4 * i + 1] + .114 * t[4 * i + 2]) + (.299 * t[4 * (i + 1) + 0] + .587 * t[4 * (i + 1) + 1] + .114 * t[4 * (i + 1) + 2])) / 4, c++, o += 2, i += 2;\n        o += s, i += s;\n      }\n    }\n    function l(t, e, n) {\n      var r,\n        o = t.length / 4 | 0;\n      if (n && n.singleChannel === !0) for (r = 0; r < o; r++) e[r] = t[4 * r + 0];else for (r = 0; r < o; r++) e[r] = .299 * t[4 * r + 0] + .587 * t[4 * r + 1] + .114 * t[4 * r + 2];\n    }\n    function d(t, e) {\n      for (var n = t.data, r = t.size.x, o = e.data, i = 0, a = r, u = n.length, c = r / 2, s = 0; a < u;) {\n        for (var f = 0; f < c; f++) o[s] = Math.floor((n[i] + n[i + 1] + n[a] + n[a + 1]) / 4), s++, i += 2, a += 2;\n        i += r, a += r;\n      }\n    }\n    function h(t, e) {\n      var n = t[0],\n        r = t[1],\n        o = t[2],\n        i = o * r,\n        a = i * (1 - Math.abs(n / 60 % 2 - 1)),\n        u = o - i,\n        c = 0,\n        s = 0,\n        f = 0;\n      return e = e || [0, 0, 0], n < 60 ? (c = i, s = a) : n < 120 ? (c = a, s = i) : n < 180 ? (s = i, f = a) : n < 240 ? (s = a, f = i) : n < 300 ? (c = a, f = i) : n < 360 && (c = i, f = a), e[0] = 255 * (c + u) | 0, e[1] = 255 * (s + u) | 0, e[2] = 255 * (f + u) | 0, e;\n    }\n    function p(t) {\n      var e,\n        n = [],\n        r = [];\n      for (e = 1; e < Math.sqrt(t) + 1; e++) t % e == 0 && (r.push(e), e !== t / e && n.unshift(Math.floor(t / e)));\n      return r.concat(n);\n    }\n    function v(t, e) {\n      for (var n = 0, r = 0, o = []; n < t.length && r < e.length;) t[n] === e[r] ? (o.push(t[n]), n++, r++) : t[n] > e[r] ? r++ : n++;\n      return o;\n    }\n    function _(t, e) {\n      function n(t) {\n        for (var e = 0, n = t[Math.floor(t.length / 2)]; e < t.length - 1 && t[e] < d;) e++;\n        return e > 0 && (n = Math.abs(t[e] - d) > Math.abs(t[e - 1] - d) ? t[e - 1] : t[e]), d / n < c[f + 1] / c[f] && d / n > c[f - 1] / c[f] ? {\n          x: n,\n          y: n\n        } : null;\n      }\n      var r,\n        o = p(e.x),\n        i = p(e.y),\n        a = Math.max(e.x, e.y),\n        u = v(o, i),\n        c = [8, 10, 15, 20, 32, 60, 80],\n        s = {\n          \"x-small\": 5,\n          small: 4,\n          medium: 3,\n          large: 2,\n          \"x-large\": 1\n        },\n        f = s[t] || s.medium,\n        l = c[f],\n        d = Math.floor(a / l);\n      return r = n(u), r || (r = n(p(a))) || (r = n(p(d * l))), r;\n    }\n    function g(t) {\n      return {\n        value: parseFloat(t),\n        unit: (t.indexOf(\"%\"), t.length, \"%\")\n      };\n    }\n    function y(t, e, n) {\n      var r = {\n          width: t,\n          height: e\n        },\n        o = Object.keys(n).reduce(function (t, e) {\n          var o = n[e],\n            i = g(o),\n            a = C[e](i, r);\n          return t[e] = a, t;\n        }, {});\n      return {\n        sx: o.left,\n        sy: o.top,\n        sw: o.right - o.left,\n        sh: o.bottom - o.top\n      };\n    }\n    var m = n(50),\n      x = n(3);\n    e.b = r, e.f = u, e.g = c, e.h = s, e.c = f, e.d = l, e.i = d, e.a = h, e.e = _, e.j = y;\n    var b = {\n        clone: n(7)\n      },\n      E = {\n        clone: n(83)\n      },\n      C = {\n        top: function top(t, e) {\n          if (\"%\" === t.unit) return Math.floor(e.height * (t.value / 100));\n        },\n        right: function right(t, e) {\n          if (\"%\" === t.unit) return Math.floor(e.width - e.width * (t.value / 100));\n        },\n        bottom: function bottom(t, e) {\n          if (\"%\" === t.unit) return Math.floor(e.height - e.height * (t.value / 100));\n        },\n        left: function left(t, e) {\n          if (\"%\" === t.unit) return Math.floor(e.width * (t.value / 100));\n        }\n      };\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t, e, n, r) {\n      e ? this.data = e : n ? (this.data = new n(t.x * t.y), n === Array && r && a.a.init(this.data, 0)) : (this.data = new Uint8Array(t.x * t.y), Uint8Array === Array && r && a.a.init(this.data, 0)), this.size = t;\n    }\n    var o = n(53),\n      i = n(19),\n      a = n(3),\n      u = {\n        clone: n(7)\n      };\n    r.prototype.inImageWithBorder = function (t, e) {\n      return t.x >= e && t.y >= e && t.x < this.size.x - e && t.y < this.size.y - e;\n    }, r.sample = function (t, e, n) {\n      var r = Math.floor(e),\n        o = Math.floor(n),\n        i = t.size.x,\n        a = o * t.size.x + r,\n        u = t.data[a + 0],\n        c = t.data[a + 1],\n        s = t.data[a + i],\n        f = t.data[a + i + 1],\n        l = u - c;\n      return e -= r, n -= o, Math.floor(e * (n * (l - s + f) - l) + n * (s - u) + u);\n    }, r.clearArray = function (t) {\n      for (var e = t.length; e--;) t[e] = 0;\n    }, r.prototype.subImage = function (t, e) {\n      return new o.a(t, e, this);\n    }, r.prototype.subImageAsCopy = function (t, e) {\n      var n,\n        r,\n        o = t.size.y,\n        i = t.size.x;\n      for (n = 0; n < i; n++) for (r = 0; r < o; r++) t.data[r * i + n] = this.data[(e.y + r) * this.size.x + e.x + n];\n    }, r.prototype.copyTo = function (t) {\n      for (var e = this.data.length, n = this.data, r = t.data; e--;) r[e] = n[e];\n    }, r.prototype.get = function (t, e) {\n      return this.data[e * this.size.x + t];\n    }, r.prototype.getSafe = function (t, e) {\n      var n;\n      if (!this.indexMapping) {\n        for (this.indexMapping = {\n          x: [],\n          y: []\n        }, n = 0; n < this.size.x; n++) this.indexMapping.x[n] = n, this.indexMapping.x[n + this.size.x] = n;\n        for (n = 0; n < this.size.y; n++) this.indexMapping.y[n] = n, this.indexMapping.y[n + this.size.y] = n;\n      }\n      return this.data[this.indexMapping.y[e + this.size.y] * this.size.x + this.indexMapping.x[t + this.size.x]];\n    }, r.prototype.set = function (t, e, n) {\n      return this.data[e * this.size.x + t] = n, this;\n    }, r.prototype.zeroBorder = function () {\n      var t,\n        e = this.size.x,\n        n = this.size.y,\n        r = this.data;\n      for (t = 0; t < e; t++) r[t] = r[(n - 1) * e + t] = 0;\n      for (t = 1; t < n - 1; t++) r[t * e] = r[t * e + (e - 1)] = 0;\n    }, r.prototype.invert = function () {\n      for (var t = this.data, e = t.length; e--;) t[e] = t[e] ? 0 : 1;\n    }, r.prototype.convolve = function (t) {\n      var e,\n        n,\n        r,\n        o,\n        i = t.length / 2 | 0,\n        a = 0;\n      for (n = 0; n < this.size.y; n++) for (e = 0; e < this.size.x; e++) {\n        for (a = 0, o = -i; o <= i; o++) for (r = -i; r <= i; r++) a += t[o + i][r + i] * this.getSafe(e + r, n + o);\n        this.data[n * this.size.x + e] = a;\n      }\n    }, r.prototype.moments = function (t) {\n      var e,\n        n,\n        r,\n        o,\n        i,\n        a,\n        c,\n        s,\n        f,\n        l,\n        d,\n        h,\n        p = this.data,\n        v = this.size.y,\n        _ = this.size.x,\n        g = [],\n        y = [],\n        m = Math.PI,\n        x = m / 4;\n      if (t <= 0) return y;\n      for (i = 0; i < t; i++) g[i] = {\n        m00: 0,\n        m01: 0,\n        m10: 0,\n        m11: 0,\n        m02: 0,\n        m20: 0,\n        theta: 0,\n        rad: 0\n      };\n      for (n = 0; n < v; n++) for (o = n * n, e = 0; e < _; e++) (r = p[n * _ + e]) > 0 && (a = g[r - 1], a.m00 += 1, a.m01 += n, a.m10 += e, a.m11 += e * n, a.m02 += o, a.m20 += e * e);\n      for (i = 0; i < t; i++) a = g[i], isNaN(a.m00) || 0 === a.m00 || (l = a.m10 / a.m00, d = a.m01 / a.m00, c = a.m11 / a.m00 - l * d, s = a.m02 / a.m00 - d * d, f = a.m20 / a.m00 - l * l, h = (s - f) / (2 * c), h = .5 * Math.atan(h) + (c >= 0 ? x : -x) + m, a.theta = (180 * h / m + 90) % 180 - 90, a.theta < 0 && (a.theta += 180), a.rad = h > m ? h - m : h, a.vec = u.clone([Math.cos(h), Math.sin(h)]), y.push(a));\n      return y;\n    }, r.prototype.show = function (t, e) {\n      var n, r, o, i, a, u, c;\n      for (e || (e = 1), n = t.getContext(\"2d\"), t.width = this.size.x, t.height = this.size.y, r = n.getImageData(0, 0, t.width, t.height), o = r.data, i = 0, c = 0; c < this.size.y; c++) for (u = 0; u < this.size.x; u++) a = c * this.size.x + u, i = this.get(u, c) * e, o[4 * a + 0] = i, o[4 * a + 1] = i, o[4 * a + 2] = i, o[4 * a + 3] = 255;\n      n.putImageData(r, 0, 0);\n    }, r.prototype.overlay = function (t, e, r) {\n      (!e || e < 0 || e > 360) && (e = 360);\n      for (var o = [0, 1, 1], a = [0, 0, 0], u = [255, 255, 255], c = [0, 0, 0], s = [], f = t.getContext(\"2d\"), l = f.getImageData(r.x, r.y, this.size.x, this.size.y), d = l.data, h = this.data.length; h--;) o[0] = this.data[h] * e, s = o[0] <= 0 ? u : o[0] >= 360 ? c : n.i(i.a)(o, a), d[4 * h + 0] = s[0], d[4 * h + 1] = s[1], d[4 * h + 2] = s[2], d[4 * h + 3] = 255;\n      f.putImageData(l, r.x, r.y);\n    }, e.a = r;\n  }, function (t, e, n) {\n    function r(t, e, n) {\n      \"__proto__\" == e && o ? o(t, e, {\n        configurable: !0,\n        enumerable: !0,\n        value: n,\n        writable: !0\n      }) : t[e] = n;\n    }\n    var o = n(37);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e) {\n      var n = i(t, e);\n      return o(n) ? n : void 0;\n    }\n    var o = n(97),\n      i = n(120);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      if (\"string\" == typeof t || o(t)) return t;\n      var e = t + \"\";\n      return \"0\" == e && 1 / t == -i ? \"-0\" : e;\n    }\n    var o = n(27),\n      i = 1 / 0;\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      return null != t && i(t.length) && !o(t);\n    }\n    var o = n(25),\n      i = n(26);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      if (!i(t)) return !1;\n      var e = o(t);\n      return e == u || e == c || e == a || e == s;\n    }\n    var o = n(8),\n      i = n(0),\n      a = \"[object AsyncFunction]\",\n      u = \"[object Function]\",\n      c = \"[object GeneratorFunction]\",\n      s = \"[object Proxy]\";\n    t.exports = r;\n  }, function (t, e) {\n    function n(t) {\n      return \"number\" == typeof t && t > -1 && t % 1 == 0 && t <= r;\n    }\n    var r = 9007199254740991;\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t) {\n      return \"symbol\" == _typeof(t) || i(t) && o(t) == a;\n    }\n    var o = n(8),\n      i = n(6),\n      a = \"[object Symbol]\";\n    t.exports = r;\n  }, function (t, e, n) {\n    var r = n(100),\n      o = n(116),\n      i = o(function (t, e, n) {\n        r(t, e, n);\n      });\n    t.exports = i;\n  }, function (t, e) {\n    t.exports = function (t) {\n      return t.webpackPolyfill || (t.deprecate = function () {}, t.paths = [], t.children || (t.children = []), Object.defineProperty(t, \"loaded\", {\n        enumerable: !0,\n        get: function get() {\n          return t.l;\n        }\n      }), Object.defineProperty(t, \"id\", {\n        enumerable: !0,\n        get: function get() {\n          return t.i;\n        }\n      }), t.webpackPolyfill = 1), t;\n    };\n  }, function (t, e, n) {\n    \"use strict\";\n\n    var r = {\n      searchDirections: [[0, 1], [1, 1], [1, 0], [1, -1], [0, -1], [-1, -1], [-1, 0], [-1, 1]],\n      create: function create(t, e) {\n        function n(t, e, n, r) {\n          var o, f, l;\n          for (o = 0; o < 7; o++) {\n            if (f = t.cy + c[t.dir][0], l = t.cx + c[t.dir][1], i = f * s + l, a[i] === e && (0 === u[i] || u[i] === n)) return u[i] = n, t.cy = f, t.cx = l, !0;\n            0 === u[i] && (u[i] = r), t.dir = (t.dir + 1) % 8;\n          }\n          return !1;\n        }\n        function r(t, e, n) {\n          return {\n            dir: n,\n            x: t,\n            y: e,\n            next: null,\n            prev: null\n          };\n        }\n        function o(t, e, o, i, a) {\n          var u,\n            c,\n            s,\n            f = null,\n            l = {\n              cx: e,\n              cy: t,\n              dir: 0\n            };\n          if (n(l, i, o, a)) {\n            f = r(e, t, l.dir), u = f, s = l.dir, c = r(l.cx, l.cy, 0), c.prev = u, u.next = c, c.next = null, u = c;\n            do l.dir = (l.dir + 6) % 8, n(l, i, o, a), s !== l.dir ? (u.dir = l.dir, c = r(l.cx, l.cy, 0), c.prev = u, u.next = c, c.next = null, u = c) : (u.dir = s, u.x = l.cx, u.y = l.cy), s = l.dir; while (l.cx !== e || l.cy !== t);\n            f.prev = u.prev, u.prev.next = f;\n          }\n          return f;\n        }\n        var i,\n          a = t.data,\n          u = e.data,\n          c = this.searchDirections,\n          s = t.size.x;\n        return {\n          trace: function trace(t, e, r, o) {\n            return n(t, e, r, o);\n          },\n          contourTracing: function contourTracing(t, e, n, r, i) {\n            return o(t, e, n, r, i);\n          }\n        };\n      }\n    };\n    e.a = r;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r() {\n      o.a.call(this);\n    }\n    var o = n(1),\n      i = n(3),\n      a = {\n        ALPHABETH_STRING: {\n          value: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. *$/+%\"\n        },\n        ALPHABET: {\n          value: [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 46, 32, 42, 36, 47, 43, 37]\n        },\n        CHARACTER_ENCODINGS: {\n          value: [52, 289, 97, 352, 49, 304, 112, 37, 292, 100, 265, 73, 328, 25, 280, 88, 13, 268, 76, 28, 259, 67, 322, 19, 274, 82, 7, 262, 70, 22, 385, 193, 448, 145, 400, 208, 133, 388, 196, 148, 168, 162, 138, 42]\n        },\n        ASTERISK: {\n          value: 148\n        },\n        FORMAT: {\n          value: \"code_39\",\n          writeable: !1\n        }\n      };\n    r.prototype = Object.create(o.a.prototype, a), r.prototype.constructor = r, r.prototype._decode = function () {\n      var t,\n        e,\n        n,\n        r,\n        o = this,\n        a = [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        u = [],\n        c = o._findStart();\n      if (!c) return null;\n      r = o._nextSet(o._row, c.end);\n      do {\n        if (a = o._toCounters(r, a), (n = o._toPattern(a)) < 0) return null;\n        if ((t = o._patternToChar(n)) < 0) return null;\n        u.push(t), e = r, r += i.a.sum(a), r = o._nextSet(o._row, r);\n      } while (\"*\" !== t);\n      return u.pop(), u.length && o._verifyTrailingWhitespace(e, r, a) ? {\n        code: u.join(\"\"),\n        start: c.start,\n        end: r,\n        startInfo: c,\n        decodedCodes: u\n      } : null;\n    }, r.prototype._verifyTrailingWhitespace = function (t, e, n) {\n      var r = i.a.sum(n);\n      return 3 * (e - t - r) >= r;\n    }, r.prototype._patternToChar = function (t) {\n      var e,\n        n = this;\n      for (e = 0; e < n.CHARACTER_ENCODINGS.length; e++) if (n.CHARACTER_ENCODINGS[e] === t) return String.fromCharCode(n.ALPHABET[e]);\n      return -1;\n    }, r.prototype._findNextWidth = function (t, e) {\n      var n,\n        r = Number.MAX_VALUE;\n      for (n = 0; n < t.length; n++) t[n] < r && t[n] > e && (r = t[n]);\n      return r;\n    }, r.prototype._toPattern = function (t) {\n      for (var e, n, r = t.length, o = 0, i = r, a = 0, u = this; i > 3;) {\n        for (o = u._findNextWidth(t, o), i = 0, e = 0, n = 0; n < r; n++) t[n] > o && (e |= 1 << r - 1 - n, i++, a += t[n]);\n        if (3 === i) {\n          for (n = 0; n < r && i > 0; n++) if (t[n] > o && (i--, 2 * t[n] >= a)) return -1;\n          return e;\n        }\n      }\n      return -1;\n    }, r.prototype._findStart = function () {\n      var t,\n        e,\n        n,\n        r = this,\n        o = r._nextSet(r._row),\n        i = o,\n        a = [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        u = 0,\n        c = !1;\n      for (t = o; t < r._row.length; t++) if (r._row[t] ^ c) a[u]++;else {\n        if (u === a.length - 1) {\n          if (r._toPattern(a) === r.ASTERISK && (n = Math.floor(Math.max(0, i - (t - i) / 4)), r._matchRange(n, i, 0))) return {\n            start: i,\n            end: t\n          };\n          for (i += a[0] + a[1], e = 0; e < 7; e++) a[e] = a[e + 2];\n          a[7] = 0, a[8] = 0, u--;\n        } else u++;\n        a[u] = 1, c = !c;\n      }\n      return null;\n    }, e.a = r;\n  }, function (t, e) {\n    function n(t, e) {\n      return t[0] * e[0] + t[1] * e[1];\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    var r = n(22),\n      o = n(5),\n      i = r(o, \"Map\");\n    t.exports = i;\n  }, function (t, e, n) {\n    function r(t) {\n      var e = -1,\n        n = null == t ? 0 : t.length;\n      for (this.clear(); ++e < n;) {\n        var r = t[e];\n        this.set(r[0], r[1]);\n      }\n    }\n    var o = n(138),\n      i = n(139),\n      a = n(140),\n      u = n(141),\n      c = n(142);\n    r.prototype.clear = o, r.prototype[\"delete\"] = i, r.prototype.get = a, r.prototype.has = u, r.prototype.set = c, t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e, n) {\n      (void 0 === n || i(t[e], n)) && (void 0 !== n || e in t) || o(t, e, n);\n    }\n    var o = n(21),\n      i = n(17);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e, n) {\n      var r = t[e];\n      u.call(t, e) && i(r, n) && (void 0 !== n || e in t) || o(t, e, n);\n    }\n    var o = n(21),\n      i = n(17),\n      a = Object.prototype,\n      u = a.hasOwnProperty;\n    t.exports = r;\n  }, function (t, e, n) {\n    var r = n(22),\n      o = function () {\n        try {\n          var t = r(Object, \"defineProperty\");\n          return t({}, \"\", {}), t;\n        } catch (t) {}\n      }();\n    t.exports = o;\n  }, function (t, e, n) {\n    (function (e) {\n      var n = \"object\" == _typeof(e) && e && e.Object === Object && e;\n      t.exports = n;\n    }).call(e, n(47));\n  }, function (t, e, n) {\n    var r = n(147),\n      o = r(Object.getPrototypeOf, Object);\n    t.exports = o;\n  }, function (t, e) {\n    function n(t) {\n      var e = t && t.constructor;\n      return t === (\"function\" == typeof e && e.prototype || r);\n    }\n    var r = Object.prototype;\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t, e, n) {\n      return e = i(void 0 === e ? t.length - 1 : e, 0), function () {\n        for (var r = arguments, a = -1, u = i(r.length - e, 0), c = Array(u); ++a < u;) c[a] = r[e + a];\n        a = -1;\n        for (var s = Array(e + 1); ++a < e;) s[a] = r[a];\n        return s[e] = n(c), o(t, this, s);\n      };\n    }\n    var o = n(87),\n      i = Math.max;\n    t.exports = r;\n  }, function (t, e, n) {\n    var r = n(106),\n      o = n(148),\n      i = o(r);\n    t.exports = i;\n  }, function (t, e) {\n    function n(t) {\n      return t;\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    (function (t) {\n      var r = n(5),\n        o = n(163),\n        i = \"object\" == _typeof(e) && e && !e.nodeType && e,\n        a = i && \"object\" == _typeof(t) && t && !t.nodeType && t,\n        u = a && a.exports === i,\n        c = u ? r.Buffer : void 0,\n        s = c ? c.isBuffer : void 0,\n        f = s || o;\n      t.exports = f;\n    }).call(e, n(29)(t));\n  }, function (t, e, n) {\n    var r = n(98),\n      o = n(109),\n      i = n(145),\n      a = i && i.isTypedArray,\n      u = a ? o(a) : r;\n    t.exports = u;\n  }, function (t, e, n) {\n    function r(t) {\n      return a(t) ? o(t, !0) : i(t);\n    }\n    var o = n(88),\n      i = n(99),\n      a = n(24);\n    t.exports = r;\n  }, function (t, e) {\n    var n;\n    n = function () {\n      return this;\n    }();\n    try {\n      n = n || Function(\"return this\")() || (0, eval)(\"this\");\n    } catch (t) {\n      \"object\" == (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && (n = window);\n    }\n    t.exports = n;\n  }, function (e, n, r) {\n    \"use strict\";\n\n    function o(t) {\n      f(t), P = k.a.create($.decoder, S);\n    }\n    function i(t) {\n      var e;\n      if (\"VideoStream\" === $.inputStream.type) e = document.createElement(\"video\"), R = H.a.createVideoStream(e);else if (\"ImageStream\" === $.inputStream.type) R = H.a.createImageStream();else if (\"LiveStream\" === $.inputStream.type) {\n        var n = a();\n        n && ((e = n.querySelector(\"video\")) || (e = document.createElement(\"video\"), n.appendChild(e))), R = H.a.createLiveStream(e), F.a.request(e, $.inputStream.constraints).then(function () {\n          R.trigger(\"canrecord\");\n        })[\"catch\"](function (e) {\n          return t(e);\n        });\n      }\n      R.setAttribute(\"preload\", \"auto\"), R.setInputStream($.inputStream), R.addEventListener(\"canrecord\", u.bind(void 0, t));\n    }\n    function a() {\n      var t = $.inputStream.target;\n      if (t && t.nodeName && 1 === t.nodeType) return t;\n      var e = \"string\" == typeof t ? t : \"#interactive.viewport\";\n      return document.querySelector(e);\n    }\n    function u(t) {\n      U.a.checkImageConstraints(R, $.locator), s($), w = V.a.create(R, K.dom.image), A($.numOfWorkers, function () {\n        0 === $.numOfWorkers && o(), c(t);\n      });\n    }\n    function c(t) {\n      R.play(), t();\n    }\n    function s() {\n      if (\"undefined\" != typeof document) {\n        var t = a();\n        if (K.dom.image = document.querySelector(\"canvas.imgBuffer\"), K.dom.image || (K.dom.image = document.createElement(\"canvas\"), K.dom.image.className = \"imgBuffer\", t && \"ImageStream\" === $.inputStream.type && t.appendChild(K.dom.image)), K.ctx.image = K.dom.image.getContext(\"2d\"), K.dom.image.width = R.getCanvasSize().x, K.dom.image.height = R.getCanvasSize().y, K.dom.overlay = document.querySelector(\"canvas.drawingBuffer\"), !K.dom.overlay) {\n          K.dom.overlay = document.createElement(\"canvas\"), K.dom.overlay.className = \"drawingBuffer\", t && t.appendChild(K.dom.overlay);\n          var e = document.createElement(\"br\");\n          e.setAttribute(\"clear\", \"all\"), t && t.appendChild(e);\n        }\n        K.ctx.overlay = K.dom.overlay.getContext(\"2d\"), K.dom.overlay.width = R.getCanvasSize().x, K.dom.overlay.height = R.getCanvasSize().y;\n      }\n    }\n    function f(t) {\n      S = t ? t : new j.a({\n        x: R.getWidth(),\n        y: R.getHeight()\n      }), D = [q.clone([0, 0]), q.clone([0, S.size.y]), q.clone([S.size.x, S.size.y]), q.clone([S.size.x, 0])], U.a.init(S, $.locator);\n    }\n    function l() {\n      return $.locate ? U.a.locate() : [[q.clone(D[0]), q.clone(D[1]), q.clone(D[2]), q.clone(D[3])]];\n    }\n    function d(t) {\n      function e(t) {\n        for (var e = t.length; e--;) t[e][0] += i, t[e][1] += a;\n      }\n      function n(t) {\n        t[0].x += i, t[0].y += a, t[1].x += i, t[1].y += a;\n      }\n      var r,\n        o = R.getTopRight(),\n        i = o.x,\n        a = o.y;\n      if (0 !== i || 0 !== a) {\n        if (t.barcodes) for (r = 0; r < t.barcodes.length; r++) d(t.barcodes[r]);\n        if (t.line && 2 === t.line.length && n(t.line), t.box && e(t.box), t.boxes && t.boxes.length > 0) for (r = 0; r < t.boxes.length; r++) e(t.boxes[r]);\n      }\n    }\n    function h(t, e) {\n      e && I && (t.barcodes ? t.barcodes.filter(function (t) {\n        return t.codeResult;\n      }).forEach(function (t) {\n        return h(t, e);\n      }) : t.codeResult && I.addResult(e, R.getCanvasSize(), t.codeResult));\n    }\n    function p(t) {\n      return t && (t.barcodes ? t.barcodes.some(function (t) {\n        return t.codeResult;\n      }) : t.codeResult);\n    }\n    function v(t, e) {\n      var n = t;\n      t && Q && (d(t), h(t, e), n = t.barcodes || t), L.a.publish(\"processed\", n), p(t) && L.a.publish(\"detected\", n);\n    }\n    function _() {\n      var t, e;\n      e = l(), e ? (t = P.decodeFromBoundingBoxes(e), t = t || {}, t.boxes = e, v(t, S.data)) : v();\n    }\n    function g() {\n      var t;\n      if (Q) {\n        if (Y.length > 0) {\n          if (!(t = Y.filter(function (t) {\n            return !t.busy;\n          })[0])) return;\n          w.attachData(t.imageData);\n        } else w.attachData(S.data);\n        w.grab() && (t ? (t.busy = !0, t.worker.postMessage({\n          cmd: \"process\",\n          imageData: t.imageData\n        }, [t.imageData.buffer])) : _());\n      } else _();\n    }\n    function y() {\n      var t = null,\n        e = 1e3 / ($.frequency || 60);\n      T = !1, function n(r) {\n        t = t || r, T || (r >= t && (t += e, g()), window.requestAnimFrame(n));\n      }(performance.now());\n    }\n    function m() {\n      Q && \"LiveStream\" === $.inputStream.type ? y() : g();\n    }\n    function x(t) {\n      var e,\n        n = {\n          worker: void 0,\n          imageData: new Uint8Array(R.getWidth() * R.getHeight()),\n          busy: !0\n        };\n      e = C(), n.worker = new Worker(e), n.worker.onmessage = function (r) {\n        if (\"initialized\" === r.data.event) return URL.revokeObjectURL(e), n.busy = !1, n.imageData = new Uint8Array(r.data.imageData), t(n);\n        \"processed\" === r.data.event ? (n.imageData = new Uint8Array(r.data.imageData), n.busy = !1, v(r.data.result, n.imageData)) : r.data.event;\n      }, n.worker.postMessage({\n        cmd: \"init\",\n        size: {\n          x: R.getWidth(),\n          y: R.getHeight()\n        },\n        imageData: n.imageData,\n        config: b($)\n      }, [n.imageData.buffer]);\n    }\n    function b(t) {\n      return X({}, t, {\n        inputStream: X({}, t.inputStream, {\n          target: null\n        })\n      });\n    }\n    function E(t) {\n      function e(t) {\n        self.postMessage({\n          event: \"processed\",\n          imageData: o.data,\n          result: t\n        }, [o.data.buffer]);\n      }\n      function n() {\n        self.postMessage({\n          event: \"initialized\",\n          imageData: o.data\n        }, [o.data.buffer]);\n      }\n      if (t) {\n        var r = t()[\"default\"];\n        if (!r) return void self.postMessage({\n          event: \"error\",\n          message: \"Quagga could not be created\"\n        });\n      }\n      var o;\n      self.onmessage = function (t) {\n        if (\"init\" === t.data.cmd) {\n          var i = t.data.config;\n          i.numOfWorkers = 0, o = new r.ImageWrapper({\n            x: t.data.size.x,\n            y: t.data.size.y\n          }, new Uint8Array(t.data.imageData)), r.init(i, n, o), r.onProcessed(e);\n        } else \"process\" === t.data.cmd ? (o.data = new Uint8Array(t.data.imageData), r.start()) : \"setReaders\" === t.data.cmd && r.setReaders(t.data.readers);\n      };\n    }\n    function C() {\n      var e, n;\n      return void 0 !== t && (n = t), e = new Blob([\"(\" + E.toString() + \")(\" + n + \");\"], {\n        type: \"text/javascript\"\n      }), window.URL.createObjectURL(e);\n    }\n    function O(t) {\n      P ? P.setReaders(t) : Q && Y.length > 0 && Y.forEach(function (e) {\n        e.worker.postMessage({\n          cmd: \"setReaders\",\n          readers: t\n        });\n      });\n    }\n    function A(t, e) {\n      var n = t - Y.length;\n      if (0 === n) return e && e();\n      if (n < 0) {\n        return Y.slice(n).forEach(function (t) {\n          t.worker.terminate();\n        }), Y = Y.slice(0, n), e && e();\n      }\n      for (var r = function r(n) {\n          Y.push(n), Y.length >= t && e && e();\n        }, o = 0; o < n; o++) x(r);\n    }\n    Object.defineProperty(n, \"__esModule\", {\n      value: !0\n    });\n    var R,\n      w,\n      T,\n      S,\n      D,\n      P,\n      I,\n      M = r(28),\n      N = r.n(M),\n      z = r(54),\n      j = (r.n(z), r(20)),\n      U = r(64),\n      k = r(57),\n      L = r(51),\n      F = r(59),\n      W = r(9),\n      B = r(49),\n      G = r(55),\n      H = r(63),\n      V = r(61),\n      X = Object.assign || function (t) {\n        for (var e = 1; e < arguments.length; e++) {\n          var n = arguments[e];\n          for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);\n        }\n        return t;\n      },\n      q = {\n        clone: r(7)\n      },\n      K = {\n        ctx: {\n          image: null,\n          overlay: null\n        },\n        dom: {\n          image: null,\n          overlay: null\n        }\n      },\n      Y = [],\n      Q = !0,\n      $ = {};\n    n[\"default\"] = {\n      init: function init(t, e, n) {\n        if ($ = N()({}, G.a, t), n) return Q = !1, o(n), e();\n        i(e);\n      },\n      start: function start() {\n        m();\n      },\n      stop: function stop() {\n        T = !0, A(0), \"LiveStream\" === $.inputStream.type && (F.a.release(), R.clearEventHandlers());\n      },\n      pause: function pause() {\n        T = !0;\n      },\n      onDetected: function onDetected(t) {\n        L.a.subscribe(\"detected\", t);\n      },\n      offDetected: function offDetected(t) {\n        L.a.unsubscribe(\"detected\", t);\n      },\n      onProcessed: function onProcessed(t) {\n        L.a.subscribe(\"processed\", t);\n      },\n      offProcessed: function offProcessed(t) {\n        L.a.unsubscribe(\"processed\", t);\n      },\n      setReaders: function setReaders(t) {\n        O(t);\n      },\n      registerResultCollector: function registerResultCollector(t) {\n        t && \"function\" == typeof t.addResult && (I = t);\n      },\n      canvas: K,\n      decodeSingle: function decodeSingle(t, e) {\n        var n = this;\n        t = N()({\n          inputStream: {\n            type: \"ImageStream\",\n            sequence: !1,\n            size: 800,\n            src: t.src\n          },\n          numOfWorkers: 1,\n          locator: {\n            halfSample: !1\n          }\n        }, t), this.init(t, function () {\n          L.a.once(\"processed\", function (t) {\n            n.stop(), e.call(null, t);\n          }, !0), m();\n        });\n      },\n      ImageWrapper: j.a,\n      ImageDebug: W.a,\n      ResultCollector: B.a,\n      CameraAccess: F.a\n    };\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t, e) {\n      return !!e && e.some(function (e) {\n        return Object.keys(e).every(function (n) {\n          return e[n] === t[n];\n        });\n      });\n    }\n    function o(t, e) {\n      return \"function\" != typeof e || e(t);\n    }\n    var i = n(9);\n    e.a = {\n      create: function create(t) {\n        function e(e) {\n          return c && e && !r(e, t.blacklist) && o(e, t.filter);\n        }\n        var n = document.createElement(\"canvas\"),\n          a = n.getContext(\"2d\"),\n          u = [],\n          c = t.capacity || 20,\n          s = t.capture === !0;\n        return {\n          addResult: function addResult(t, r, o) {\n            var f = {};\n            e(o) && (c--, f.codeResult = o, s && (n.width = r.x, n.height = r.y, i.a.drawImage(t, r, a), f.frame = n.toDataURL()), u.push(f));\n          },\n          getResults: function getResults() {\n            return u;\n          }\n        };\n      }\n    };\n  }, function (t, e, n) {\n    \"use strict\";\n\n    var r = {\n      clone: n(7),\n      dot: n(32)\n    };\n    e.a = {\n      create: function create(t, e) {\n        function n() {\n          o(t), i();\n        }\n        function o(t) {\n          c[t.id] = t, a.push(t);\n        }\n        function i() {\n          var t,\n            e = 0;\n          for (t = 0; t < a.length; t++) e += a[t].rad;\n          u.rad = e / a.length, u.vec = r.clone([Math.cos(u.rad), Math.sin(u.rad)]);\n        }\n        var a = [],\n          u = {\n            rad: 0,\n            vec: r.clone([0, 0])\n          },\n          c = {};\n        return n(), {\n          add: function add(t) {\n            c[t.id] || (o(t), i());\n          },\n          fits: function fits(t) {\n            return Math.abs(r.dot(t.point.vec, u.vec)) > e;\n          },\n          getPoints: function getPoints() {\n            return a;\n          },\n          getCenter: function getCenter() {\n            return u;\n          }\n        };\n      },\n      createPoint: function createPoint(t, e, n) {\n        return {\n          rad: t[n],\n          point: t,\n          id: e\n        };\n      }\n    };\n  }, function (t, e, n) {\n    \"use strict\";\n\n    e.a = function () {\n      function t(t) {\n        return o[t] || (o[t] = {\n          subscribers: []\n        }), o[t];\n      }\n      function e() {\n        o = {};\n      }\n      function n(t, e) {\n        t.async ? setTimeout(function () {\n          t.callback(e);\n        }, 4) : t.callback(e);\n      }\n      function r(e, n, r) {\n        var o;\n        if (\"function\" == typeof n) o = {\n          callback: n,\n          async: r\n        };else if (o = n, !o.callback) throw \"Callback was not specified on options\";\n        t(e).subscribers.push(o);\n      }\n      var o = {};\n      return {\n        subscribe: function subscribe(t, e, n) {\n          return r(t, e, n);\n        },\n        publish: function publish(e, r) {\n          var o = t(e),\n            i = o.subscribers;\n          i.filter(function (t) {\n            return !!t.once;\n          }).forEach(function (t) {\n            n(t, r);\n          }), o.subscribers = i.filter(function (t) {\n            return !t.once;\n          }), o.subscribers.forEach(function (t) {\n            n(t, r);\n          });\n        },\n        once: function once(t, e, n) {\n          r(t, {\n            callback: e,\n            async: n,\n            once: !0\n          });\n        },\n        unsubscribe: function unsubscribe(n, r) {\n          var o;\n          n ? (o = t(n), o.subscribers = o && r ? o.subscribers.filter(function (t) {\n            return t.callback !== r;\n          }) : []) : e();\n        }\n      };\n    }();\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r() {\n      return navigator.mediaDevices && \"function\" == typeof navigator.mediaDevices.enumerateDevices ? navigator.mediaDevices.enumerateDevices() : Promise.reject(new Error(\"enumerateDevices is not defined\"));\n    }\n    function o(t) {\n      return navigator.mediaDevices && \"function\" == typeof navigator.mediaDevices.getUserMedia ? navigator.mediaDevices.getUserMedia(t) : Promise.reject(new Error(\"getUserMedia is not defined\"));\n    }\n    e.b = r, e.a = o;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t, e, n) {\n      n || (n = {\n        data: null,\n        size: e\n      }), this.data = n.data, this.originalSize = n.size, this.I = n, this.from = t, this.size = e;\n    }\n    r.prototype.show = function (t, e) {\n      var n, r, o, i, a, u, c;\n      for (e || (e = 1), n = t.getContext(\"2d\"), t.width = this.size.x, t.height = this.size.y, r = n.getImageData(0, 0, t.width, t.height), o = r.data, i = 0, a = 0; a < this.size.y; a++) for (u = 0; u < this.size.x; u++) c = a * this.size.x + u, i = this.get(u, a) * e, o[4 * c + 0] = i, o[4 * c + 1] = i, o[4 * c + 2] = i, o[4 * c + 3] = 255;\n      r.data = o, n.putImageData(r, 0, 0);\n    }, r.prototype.get = function (t, e) {\n      return this.data[(this.from.y + e) * this.originalSize.x + this.from.x + t];\n    }, r.prototype.updateData = function (t) {\n      this.originalSize = t.size, this.data = t.data;\n    }, r.prototype.updateFrom = function (t) {\n      return this.from = t, this;\n    }, e.a = r;\n  }, function (t, e) {\n    \"undefined\" != typeof window && (window.requestAnimFrame = function () {\n      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (t) {\n        window.setTimeout(t, 1e3 / 60);\n      };\n    }()), Math.imul = Math.imul || function (t, e) {\n      var n = t >>> 16 & 65535,\n        r = 65535 & t,\n        o = e >>> 16 & 65535,\n        i = 65535 & e;\n      return r * i + (n * i + r * o << 16 >>> 0) | 0;\n    }, \"function\" != typeof Object.assign && (Object.assign = function (t) {\n      \"use strict\";\n\n      if (null === t) throw new TypeError(\"Cannot convert undefined or null to object\");\n      for (var e = Object(t), n = 1; n < arguments.length; n++) {\n        var r = arguments[n];\n        if (null !== r) for (var o in r) Object.prototype.hasOwnProperty.call(r, o) && (e[o] = r[o]);\n      }\n      return e;\n    });\n  }, function (t, e, n) {\n    \"use strict\";\n\n    var r = void 0;\n    r = n(56), e.a = r;\n  }, function (t, e) {\n    t.exports = {\n      inputStream: {\n        name: \"Live\",\n        type: \"LiveStream\",\n        constraints: {\n          width: 640,\n          height: 480,\n          facingMode: \"environment\"\n        },\n        area: {\n          top: \"0%\",\n          right: \"0%\",\n          left: \"0%\",\n          bottom: \"0%\"\n        },\n        singleChannel: !1\n      },\n      locate: !0,\n      numOfWorkers: 4,\n      decoder: {\n        readers: [\"code_128_reader\"]\n      },\n      locator: {\n        halfSample: !0,\n        patchSize: \"medium\"\n      }\n    };\n  }, function (t, e, n) {\n    \"use strict\";\n\n    var r = n(58),\n      o = (n(9), n(69)),\n      i = n(4),\n      a = n(31),\n      u = n(70),\n      c = n(68),\n      s = n(77),\n      f = n(74),\n      l = n(72),\n      d = n(73),\n      h = n(76),\n      p = n(75),\n      v = n(67),\n      _ = n(71),\n      g = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (t) {\n        return _typeof(t);\n      } : function (t) {\n        return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : _typeof(t);\n      },\n      y = {\n        code_128_reader: o.a,\n        ean_reader: i.a,\n        ean_5_reader: d.a,\n        ean_2_reader: l.a,\n        ean_8_reader: f.a,\n        code_39_reader: a.a,\n        code_39_vin_reader: u.a,\n        codabar_reader: c.a,\n        upc_reader: s.a,\n        upc_e_reader: h.a,\n        i2of5_reader: p.a,\n        \"2of5_reader\": v.a,\n        code_93_reader: _.a\n      };\n    e.a = {\n      create: function create(t, e) {\n        function n() {}\n        function o() {\n          t.readers.forEach(function (t) {\n            var e,\n              n = {},\n              r = [];\n            \"object\" === (void 0 === t ? \"undefined\" : g(t)) ? (e = t.format, n = t.config) : \"string\" == typeof t && (e = t), n.supplements && (r = n.supplements.map(function (t) {\n              return new y[t]();\n            })), h.push(new y[e](n, r));\n          });\n        }\n        function i() {}\n        function a(t, n, r) {\n          function o(e) {\n            var r = {\n              y: e * Math.sin(n),\n              x: e * Math.cos(n)\n            };\n            t[0].y -= r.y, t[0].x -= r.x, t[1].y += r.y, t[1].x += r.x;\n          }\n          for (o(r); r > 1 && (!e.inImageWithBorder(t[0], 0) || !e.inImageWithBorder(t[1], 0));) r -= Math.ceil(r / 2), o(-r);\n          return t;\n        }\n        function u(t) {\n          return [{\n            x: (t[1][0] - t[0][0]) / 2 + t[0][0],\n            y: (t[1][1] - t[0][1]) / 2 + t[0][1]\n          }, {\n            x: (t[3][0] - t[2][0]) / 2 + t[2][0],\n            y: (t[3][1] - t[2][1]) / 2 + t[2][1]\n          }];\n        }\n        function c(t) {\n          var n,\n            o = null,\n            i = r.a.getBarcodeLine(e, t[0], t[1]);\n          for (r.a.toBinaryLine(i), n = 0; n < h.length && null === o; n++) o = h[n].decodePattern(i.line);\n          return null === o ? null : {\n            codeResult: o,\n            barcodeLine: i\n          };\n        }\n        function s(t, e, n) {\n          var r,\n            o,\n            i,\n            a = Math.sqrt(Math.pow(t[1][0] - t[0][0], 2) + Math.pow(t[1][1] - t[0][1], 2)),\n            u = 16,\n            s = null,\n            f = Math.sin(n),\n            l = Math.cos(n);\n          for (r = 1; r < u && null === s; r++) o = a / u * r * (r % 2 == 0 ? -1 : 1), i = {\n            y: o * f,\n            x: o * l\n          }, e[0].y += i.x, e[0].x -= i.y, e[1].y += i.x, e[1].x -= i.y, s = c(e);\n          return s;\n        }\n        function f(t) {\n          return Math.sqrt(Math.pow(Math.abs(t[1].y - t[0].y), 2) + Math.pow(Math.abs(t[1].x - t[0].x), 2));\n        }\n        function l(t) {\n          var e, n, r, o;\n          d.ctx.overlay;\n          return e = u(t), o = f(e), n = Math.atan2(e[1].y - e[0].y, e[1].x - e[0].x), null === (e = a(e, n, Math.floor(.1 * o))) ? null : (r = c(e), null === r && (r = s(t, e, n)), null === r ? null : {\n            codeResult: r.codeResult,\n            line: e,\n            angle: n,\n            pattern: r.barcodeLine.line,\n            threshold: r.barcodeLine.threshold\n          });\n        }\n        var d = {\n            ctx: {\n              frequency: null,\n              pattern: null,\n              overlay: null\n            },\n            dom: {\n              frequency: null,\n              pattern: null,\n              overlay: null\n            }\n          },\n          h = [];\n        return n(), o(), i(), {\n          decodeFromBoundingBox: function decodeFromBoundingBox(t) {\n            return l(t);\n          },\n          decodeFromBoundingBoxes: function decodeFromBoundingBoxes(e) {\n            var n,\n              r,\n              o = [],\n              i = t.multiple;\n            for (n = 0; n < e.length; n++) {\n              var a = e[n];\n              if (r = l(a) || {}, r.box = a, i) o.push(r);else if (r.codeResult) return r;\n            }\n            if (i) return {\n              barcodes: o\n            };\n          },\n          setReaders: function setReaders(e) {\n            t.readers = e, h.length = 0, o();\n          }\n        };\n      }\n    };\n  }, function (t, e, n) {\n    \"use strict\";\n\n    var r = (n(20), {}),\n      o = {\n        DIR: {\n          UP: 1,\n          DOWN: -1\n        }\n      };\n    r.getBarcodeLine = function (t, e, n) {\n      function r(t, e) {\n        l = y[e * m + t], x += l, b = l < b ? l : b, E = l > E ? l : E, g.push(l);\n      }\n      var o,\n        i,\n        a,\n        u,\n        c,\n        s,\n        f,\n        l,\n        d = 0 | e.x,\n        h = 0 | e.y,\n        p = 0 | n.x,\n        v = 0 | n.y,\n        _ = Math.abs(v - h) > Math.abs(p - d),\n        g = [],\n        y = t.data,\n        m = t.size.x,\n        x = 0,\n        b = 255,\n        E = 0;\n      for (_ && (s = d, d = h, h = s, s = p, p = v, v = s), d > p && (s = d, d = p, p = s, s = h, h = v, v = s), o = p - d, i = Math.abs(v - h), a = o / 2 | 0, c = h, u = h < v ? 1 : -1, f = d; f < p; f++) _ ? r(c, f) : r(f, c), (a -= i) < 0 && (c += u, a += o);\n      return {\n        line: g,\n        min: b,\n        max: E\n      };\n    }, r.toBinaryLine = function (t) {\n      var e,\n        n,\n        r,\n        i,\n        a,\n        u,\n        c = t.min,\n        s = t.max,\n        f = t.line,\n        l = c + (s - c) / 2,\n        d = [],\n        h = (s - c) / 12,\n        p = -h;\n      for (r = f[0] > l ? o.DIR.UP : o.DIR.DOWN, d.push({\n        pos: 0,\n        val: f[0]\n      }), a = 0; a < f.length - 2; a++) e = f[a + 1] - f[a], n = f[a + 2] - f[a + 1], i = e + n < p && f[a + 1] < 1.5 * l ? o.DIR.DOWN : e + n > h && f[a + 1] > .5 * l ? o.DIR.UP : r, r !== i && (d.push({\n        pos: a,\n        val: f[a]\n      }), r = i);\n      for (d.push({\n        pos: f.length,\n        val: f[f.length - 1]\n      }), u = d[0].pos; u < d[1].pos; u++) f[u] = f[u] > l ? 0 : 1;\n      for (a = 1; a < d.length - 1; a++) for (h = d[a + 1].val > d[a].val ? d[a].val + (d[a + 1].val - d[a].val) / 3 * 2 | 0 : d[a + 1].val + (d[a].val - d[a + 1].val) / 3 | 0, u = d[a].pos; u < d[a + 1].pos; u++) f[u] = f[u] > h ? 0 : 1;\n      return {\n        line: f,\n        threshold: h\n      };\n    }, r.debug = {\n      printFrequency: function printFrequency(t, e) {\n        var n,\n          r = e.getContext(\"2d\");\n        for (e.width = t.length, e.height = 256, r.beginPath(), r.strokeStyle = \"blue\", n = 0; n < t.length; n++) r.moveTo(n, 255), r.lineTo(n, 255 - t[n]);\n        r.stroke(), r.closePath();\n      },\n      printPattern: function printPattern(t, e) {\n        var n,\n          r = e.getContext(\"2d\");\n        for (e.width = t.length, r.fillColor = \"black\", n = 0; n < t.length; n++) 1 === t[n] && r.fillRect(n, 0, 1, 100);\n      }\n    }, e.a = r;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t) {\n      return new Promise(function (e, n) {\n        function r() {\n          o > 0 ? t.videoWidth > 10 && t.videoHeight > 10 ? e() : window.setTimeout(r, 500) : n(\"Unable to play video stream. Is webcam working?\"), o--;\n        }\n        var o = 10;\n        r();\n      });\n    }\n    function o(t, e) {\n      return n.i(d.a)(e).then(function (e) {\n        return new Promise(function (n) {\n          s = e, t.setAttribute(\"autoplay\", !0), t.setAttribute(\"muted\", !0), t.setAttribute(\"playsinline\", !0), t.srcObject = e, t.addEventListener(\"loadedmetadata\", function () {\n            t.play(), n();\n          });\n        });\n      }).then(r.bind(null, t));\n    }\n    function i(t) {\n      var e = l()(t, [\"width\", \"height\", \"facingMode\", \"aspectRatio\", \"deviceId\"]);\n      return void 0 !== t.minAspectRatio && t.minAspectRatio > 0 && (e.aspectRatio = t.minAspectRatio, console.log(\"WARNING: Constraint 'minAspectRatio' is deprecated; Use 'aspectRatio' instead\")), void 0 !== t.facing && (e.facingMode = t.facing, console.log(\"WARNING: Constraint 'facing' is deprecated. Use 'facingMode' instead'\")), e;\n    }\n    function a(t) {\n      var e = {\n        audio: !1,\n        video: i(t)\n      };\n      return e.video.deviceId && e.video.facingMode && delete e.video.facingMode, Promise.resolve(e);\n    }\n    function u() {\n      return n.i(d.b)().then(function (t) {\n        return t.filter(function (t) {\n          return \"videoinput\" === t.kind;\n        });\n      });\n    }\n    function c() {\n      if (s) {\n        var t = s.getVideoTracks();\n        if (t && t.length) return t[0];\n      }\n    }\n    var s,\n      f = n(162),\n      l = n.n(f),\n      d = n(52);\n    e.a = {\n      request: function request(t, e) {\n        return a(e).then(o.bind(null, t));\n      },\n      release: function release() {\n        var t = s && s.getVideoTracks();\n        t && t.length && t[0].stop(), s = null;\n      },\n      enumerateVideoDevices: u,\n      getActiveStreamLabel: function getActiveStreamLabel() {\n        var t = c();\n        return t ? t.label : \"\";\n      },\n      getActiveTrack: c\n    };\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t) {\n      var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : d;\n      return /^blob\\:/i.test(t) ? i(t).then(o).then(function (t) {\n        return a(t, e);\n      }) : Promise.resolve(null);\n    }\n    function o(t) {\n      return new Promise(function (e) {\n        var n = new FileReader();\n        n.onload = function (t) {\n          return e(t.target.result);\n        }, n.readAsArrayBuffer(t);\n      });\n    }\n    function i(t) {\n      return new Promise(function (e, n) {\n        var r = new XMLHttpRequest();\n        r.open(\"GET\", t, !0), r.responseType = \"blob\", r.onreadystatechange = function () {\n          r.readyState !== XMLHttpRequest.DONE || 200 !== r.status && 0 !== r.status || e(this.response);\n        }, r.onerror = n, r.send();\n      });\n    }\n    function a(t) {\n      var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : d,\n        n = new DataView(t),\n        r = t.byteLength,\n        o = e.reduce(function (t, e) {\n          var n = Object.keys(l).filter(function (t) {\n            return l[t] === e;\n          })[0];\n          return n && (t[n] = e), t;\n        }, {}),\n        i = 2;\n      if (255 !== n.getUint8(0) || 216 !== n.getUint8(1)) return !1;\n      for (; i < r;) {\n        if (255 !== n.getUint8(i)) return !1;\n        if (225 === n.getUint8(i + 1)) return u(n, i + 4, o);\n        i += 2 + n.getUint16(i + 2);\n      }\n    }\n    function u(t, e, n) {\n      if (\"Exif\" !== f(t, e, 4)) return !1;\n      var r = e + 6,\n        o = void 0;\n      if (18761 === t.getUint16(r)) o = !1;else {\n        if (19789 !== t.getUint16(r)) return !1;\n        o = !0;\n      }\n      if (42 !== t.getUint16(r + 2, !o)) return !1;\n      var i = t.getUint32(r + 4, !o);\n      return !(i < 8) && c(t, r, r + i, n, o);\n    }\n    function c(t, e, n, r, o) {\n      for (var i = t.getUint16(n, !o), a = {}, u = 0; u < i; u++) {\n        var c = n + 12 * u + 2,\n          f = r[t.getUint16(c, !o)];\n        f && (a[f] = s(t, c, e, n, o));\n      }\n      return a;\n    }\n    function s(t, e, n, r, o) {\n      var i = t.getUint16(e + 2, !o),\n        a = t.getUint32(e + 4, !o);\n      switch (i) {\n        case 3:\n          if (1 === a) return t.getUint16(e + 8, !o);\n      }\n    }\n    function f(t, e, n) {\n      for (var r = \"\", o = e; o < e + n; o++) r += String.fromCharCode(t.getUint8(o));\n      return r;\n    }\n    e.a = r;\n    var l = {\n        274: \"orientation\"\n      },\n      d = Object.keys(l).map(function (t) {\n        return l[t];\n      });\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t, e) {\n      t.width !== e.x && (t.width = e.x), t.height !== e.y && (t.height = e.y);\n    }\n    var o = n(19),\n      i = Math.PI / 180,\n      a = {};\n    a.create = function (t, e) {\n      var a,\n        u = {},\n        c = t.getConfig(),\n        s = (n.i(o.b)(t.getRealWidth(), t.getRealHeight()), t.getCanvasSize()),\n        f = n.i(o.b)(t.getWidth(), t.getHeight()),\n        l = t.getTopRight(),\n        d = l.x,\n        h = l.y,\n        p = null,\n        v = null;\n      return a = e ? e : document.createElement(\"canvas\"), a.width = s.x, a.height = s.y, p = a.getContext(\"2d\"), v = new Uint8Array(f.x * f.y), u.attachData = function (t) {\n        v = t;\n      }, u.getData = function () {\n        return v;\n      }, u.grab = function () {\n        var e,\n          u = c.halfSample,\n          l = t.getFrame(),\n          _ = l,\n          g = 0;\n        if (_) {\n          if (r(a, s), \"ImageStream\" === c.type && (_ = l.img, l.tags && l.tags.orientation)) switch (l.tags.orientation) {\n            case 6:\n              g = 90 * i;\n              break;\n            case 8:\n              g = -90 * i;\n          }\n          return 0 !== g ? (p.translate(s.x / 2, s.y / 2), p.rotate(g), p.drawImage(_, -s.y / 2, -s.x / 2, s.y, s.x), p.rotate(-g), p.translate(-s.x / 2, -s.y / 2)) : p.drawImage(_, 0, 0, s.x, s.y), e = p.getImageData(d, h, f.x, f.y).data, u ? n.i(o.c)(e, f, v) : n.i(o.d)(e, v, c), !0;\n        }\n        return !1;\n      }, u.getSize = function () {\n        return f;\n      }, u;\n    }, e.a = a;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t, e) {\n      t.onload = function () {\n        e.loaded(this);\n      };\n    }\n    var o = n(60),\n      i = {};\n    i.load = function (t, e, i, a, u) {\n      var c,\n        s,\n        f,\n        l = new Array(a),\n        d = new Array(l.length);\n      if (u === !1) l[0] = t;else for (c = 0; c < l.length; c++) f = i + c, l[c] = t + \"image-\" + (\"00\" + f).slice(-3) + \".jpg\";\n      for (d.notLoaded = [], d.addImage = function (t) {\n        d.notLoaded.push(t);\n      }, d.loaded = function (r) {\n        for (var i = d.notLoaded, a = 0; a < i.length; a++) if (i[a] === r) {\n          i.splice(a, 1);\n          for (var c = 0; c < l.length; c++) {\n            var s = l[c].substr(l[c].lastIndexOf(\"/\"));\n            if (r.src.lastIndexOf(s) !== -1) {\n              d[c] = {\n                img: r\n              };\n              break;\n            }\n          }\n          break;\n        }\n        0 === i.length && (u === !1 ? n.i(o.a)(t, [\"orientation\"]).then(function (t) {\n          d[0].tags = t, e(d);\n        })[\"catch\"](function (t) {\n          console.log(t), e(d);\n        }) : e(d));\n      }, c = 0; c < l.length; c++) s = new Image(), d.addImage(s), r(s, d), s.src = l[c];\n    }, e.a = i;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    var r = n(62),\n      o = {};\n    o.createVideoStream = function (t) {\n      function e() {\n        var e = t.videoWidth,\n          o = t.videoHeight;\n        n = i.size ? e / o > 1 ? i.size : Math.floor(e / o * i.size) : e, r = i.size ? e / o > 1 ? Math.floor(o / e * i.size) : i.size : o, s.x = n, s.y = r;\n      }\n      var n,\n        r,\n        o = {},\n        i = null,\n        a = [\"canrecord\", \"ended\"],\n        u = {},\n        c = {\n          x: 0,\n          y: 0\n        },\n        s = {\n          x: 0,\n          y: 0\n        };\n      return o.getRealWidth = function () {\n        return t.videoWidth;\n      }, o.getRealHeight = function () {\n        return t.videoHeight;\n      }, o.getWidth = function () {\n        return n;\n      }, o.getHeight = function () {\n        return r;\n      }, o.setWidth = function (t) {\n        n = t;\n      }, o.setHeight = function (t) {\n        r = t;\n      }, o.setInputStream = function (e) {\n        i = e, t.src = void 0 !== e.src ? e.src : \"\";\n      }, o.ended = function () {\n        return t.ended;\n      }, o.getConfig = function () {\n        return i;\n      }, o.setAttribute = function (e, n) {\n        t.setAttribute(e, n);\n      }, o.pause = function () {\n        t.pause();\n      }, o.play = function () {\n        t.play();\n      }, o.setCurrentTime = function (e) {\n        \"LiveStream\" !== i.type && (t.currentTime = e);\n      }, o.addEventListener = function (e, n, r) {\n        a.indexOf(e) !== -1 ? (u[e] || (u[e] = []), u[e].push(n)) : t.addEventListener(e, n, r);\n      }, o.clearEventHandlers = function () {\n        a.forEach(function (e) {\n          var n = u[e];\n          n && n.length > 0 && n.forEach(function (n) {\n            t.removeEventListener(e, n);\n          });\n        });\n      }, o.trigger = function (t, n) {\n        var r,\n          i = u[t];\n        if (\"canrecord\" === t && e(), i && i.length > 0) for (r = 0; r < i.length; r++) i[r].apply(o, n);\n      }, o.setTopRight = function (t) {\n        c.x = t.x, c.y = t.y;\n      }, o.getTopRight = function () {\n        return c;\n      }, o.setCanvasSize = function (t) {\n        s.x = t.x, s.y = t.y;\n      }, o.getCanvasSize = function () {\n        return s;\n      }, o.getFrame = function () {\n        return t;\n      }, o;\n    }, o.createLiveStream = function (t) {\n      t.setAttribute(\"autoplay\", !0);\n      var e = o.createVideoStream(t);\n      return e.ended = function () {\n        return !1;\n      }, e;\n    }, o.createImageStream = function () {\n      function t() {\n        l = !1, r.a.load(v, function (t) {\n          if (d = t, t[0].tags && t[0].tags.orientation) switch (t[0].tags.orientation) {\n            case 6:\n            case 8:\n              u = t[0].img.height, c = t[0].img.width;\n              break;\n            default:\n              u = t[0].img.width, c = t[0].img.height;\n          } else u = t[0].img.width, c = t[0].img.height;\n          n = a.size ? u / c > 1 ? a.size : Math.floor(u / c * a.size) : u, o = a.size ? u / c > 1 ? Math.floor(c / u * a.size) : a.size : c, x.x = n, x.y = o, l = !0, s = 0, setTimeout(function () {\n            e(\"canrecord\", []);\n          }, 0);\n        }, p, h, a.sequence);\n      }\n      function e(t, e) {\n        var n,\n          r = y[t];\n        if (r && r.length > 0) for (n = 0; n < r.length; n++) r[n].apply(i, e);\n      }\n      var n,\n        o,\n        i = {},\n        a = null,\n        u = 0,\n        c = 0,\n        s = 0,\n        f = !0,\n        l = !1,\n        d = null,\n        h = 0,\n        p = 1,\n        v = null,\n        _ = !1,\n        g = [\"canrecord\", \"ended\"],\n        y = {},\n        m = {\n          x: 0,\n          y: 0\n        },\n        x = {\n          x: 0,\n          y: 0\n        };\n      return i.trigger = e, i.getWidth = function () {\n        return n;\n      }, i.getHeight = function () {\n        return o;\n      }, i.setWidth = function (t) {\n        n = t;\n      }, i.setHeight = function (t) {\n        o = t;\n      }, i.getRealWidth = function () {\n        return u;\n      }, i.getRealHeight = function () {\n        return c;\n      }, i.setInputStream = function (e) {\n        a = e, e.sequence === !1 ? (v = e.src, h = 1) : (v = e.src, h = e.length), t();\n      }, i.ended = function () {\n        return _;\n      }, i.setAttribute = function () {}, i.getConfig = function () {\n        return a;\n      }, i.pause = function () {\n        f = !0;\n      }, i.play = function () {\n        f = !1;\n      }, i.setCurrentTime = function (t) {\n        s = t;\n      }, i.addEventListener = function (t, e) {\n        g.indexOf(t) !== -1 && (y[t] || (y[t] = []), y[t].push(e));\n      }, i.setTopRight = function (t) {\n        m.x = t.x, m.y = t.y;\n      }, i.getTopRight = function () {\n        return m;\n      }, i.setCanvasSize = function (t) {\n        x.x = t.x, x.y = t.y;\n      }, i.getCanvasSize = function () {\n        return x;\n      }, i.getFrame = function () {\n        var t;\n        return l ? (f || (t = d[s], s < h - 1 ? s++ : setTimeout(function () {\n          _ = !0, e(\"ended\", []);\n        }, 0)), t) : null;\n      }, i;\n    }, e.a = o;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    (function (t) {\n      function r() {\n        var e;\n        v = p.halfSample ? new R.a({\n          x: O.size.x / 2 | 0,\n          y: O.size.y / 2 | 0\n        }) : O, C = n.i(w.e)(p.patchSize, v.size), z.x = v.size.x / C.x | 0, z.y = v.size.y / C.y | 0, E = new R.a(v.size, void 0, Uint8Array, !1), y = new R.a(C, void 0, Array, !0), e = new ArrayBuffer(65536), g = new R.a(C, new Uint8Array(e, 0, C.x * C.y)), _ = new R.a(C, new Uint8Array(e, C.x * C.y * 3, C.x * C.y), void 0, !0), A = n.i(P.a)(\"undefined\" != typeof window ? window : \"undefined\" != typeof self ? self : t, {\n          size: C.x\n        }, e), b = new R.a({\n          x: v.size.x / g.size.x | 0,\n          y: v.size.y / g.size.y | 0\n        }, void 0, Array, !0), m = new R.a(b.size, void 0, void 0, !0), x = new R.a(b.size, void 0, Int32Array, !0);\n      }\n      function o() {\n        p.useWorker || \"undefined\" == typeof document || (N.dom.binary = document.createElement(\"canvas\"), N.dom.binary.className = \"binaryBuffer\", N.ctx.binary = N.dom.binary.getContext(\"2d\"), N.dom.binary.width = E.size.x, N.dom.binary.height = E.size.y);\n      }\n      function i(t) {\n        var e,\n          n,\n          r,\n          o,\n          i,\n          a,\n          u,\n          c = E.size.x,\n          s = E.size.y,\n          f = -E.size.x,\n          l = -E.size.y;\n        for (e = 0, n = 0; n < t.length; n++) o = t[n], e += o.rad;\n        for (e /= t.length, e = (180 * e / Math.PI + 90) % 180 - 90, e < 0 && (e += 180), e = (180 - e) * Math.PI / 180, i = M.copy(M.create(), [Math.cos(e), Math.sin(e), -Math.sin(e), Math.cos(e)]), n = 0; n < t.length; n++) for (o = t[n], r = 0; r < 4; r++) I.transformMat2(o.box[r], o.box[r], i);\n        for (n = 0; n < t.length; n++) for (o = t[n], r = 0; r < 4; r++) o.box[r][0] < c && (c = o.box[r][0]), o.box[r][0] > f && (f = o.box[r][0]), o.box[r][1] < s && (s = o.box[r][1]), o.box[r][1] > l && (l = o.box[r][1]);\n        for (a = [[c, s], [f, s], [f, l], [c, l]], u = p.halfSample ? 2 : 1, i = M.invert(i, i), r = 0; r < 4; r++) I.transformMat2(a[r], a[r], i);\n        for (r = 0; r < 4; r++) I.scale(a[r], a[r], u);\n        return a;\n      }\n      function a() {\n        n.i(w.f)(v, E), E.zeroBorder();\n      }\n      function u() {\n        var t,\n          e,\n          n,\n          r,\n          o,\n          i,\n          a,\n          u = [];\n        for (t = 0; t < z.x; t++) for (e = 0; e < z.y; e++) n = g.size.x * t, r = g.size.y * e, l(n, r), _.zeroBorder(), T.a.init(y.data, 0), i = S.a.create(_, y), a = i.rasterize(0), o = y.moments(a.count), u = u.concat(d(o, [t, e], n, r));\n        return u;\n      }\n      function c(t) {\n        var e,\n          n,\n          r = [];\n        for (e = 0; e < t; e++) r.push(0);\n        for (n = x.data.length; n--;) x.data[n] > 0 && r[x.data[n] - 1]++;\n        return r = r.map(function (t, e) {\n          return {\n            val: t,\n            label: e + 1\n          };\n        }), r.sort(function (t, e) {\n          return e.val - t.val;\n        }), r.filter(function (t) {\n          return t.val >= 5;\n        });\n      }\n      function s(t, e) {\n        var n,\n          r,\n          o,\n          a,\n          u = [],\n          c = [];\n        for (n = 0; n < t.length; n++) {\n          for (r = x.data.length, u.length = 0; r--;) x.data[r] === t[n].label && (o = b.data[r], u.push(o));\n          a = i(u), a && c.push(a);\n        }\n        return c;\n      }\n      function f(t) {\n        var e = n.i(w.g)(t, .9),\n          r = n.i(w.h)(e, 1, function (t) {\n            return t.getPoints().length;\n          }),\n          o = [],\n          i = [];\n        if (1 === r.length) {\n          o = r[0].item.getPoints();\n          for (var a = 0; a < o.length; a++) i.push(o[a].point);\n        }\n        return i;\n      }\n      function l(t, e) {\n        E.subImageAsCopy(g, n.i(w.b)(t, e)), A.skeletonize();\n      }\n      function d(t, e, n, r) {\n        var o,\n          i,\n          a,\n          u,\n          c = [],\n          s = [],\n          l = Math.ceil(C.x / 3);\n        if (t.length >= 2) {\n          for (o = 0; o < t.length; o++) t[o].m00 > l && c.push(t[o]);\n          if (c.length >= 2) {\n            for (a = f(c), i = 0, o = 0; o < a.length; o++) i += a[o].rad;\n            a.length > 1 && a.length >= c.length / 4 * 3 && a.length > t.length / 4 && (i /= a.length, u = {\n              index: e[1] * z.x + e[0],\n              pos: {\n                x: n,\n                y: r\n              },\n              box: [I.clone([n, r]), I.clone([n + g.size.x, r]), I.clone([n + g.size.x, r + g.size.y]), I.clone([n, r + g.size.y])],\n              moments: a,\n              rad: i,\n              vec: I.clone([Math.cos(i), Math.sin(i)])\n            }, s.push(u));\n          }\n        }\n        return s;\n      }\n      function h(t) {\n        function e() {\n          var t;\n          for (t = 0; t < x.data.length; t++) if (0 === x.data[t] && 1 === m.data[t]) return t;\n          return x.length;\n        }\n        function n(t) {\n          var e,\n            r,\n            o,\n            u,\n            c,\n            s = {\n              x: t % x.size.x,\n              y: t / x.size.x | 0\n            };\n          if (t < x.data.length) for (o = b.data[t], x.data[t] = i, c = 0; c < D.a.searchDirections.length; c++) r = s.y + D.a.searchDirections[c][0], e = s.x + D.a.searchDirections[c][1], u = r * x.size.x + e, 0 !== m.data[u] ? 0 === x.data[u] && Math.abs(I.dot(b.data[u].vec, o.vec)) > a && n(u) : x.data[u] = Number.MAX_VALUE;\n        }\n        var r,\n          o,\n          i = 0,\n          a = .95,\n          u = 0;\n        for (T.a.init(m.data, 0), T.a.init(x.data, 0), T.a.init(b.data, null), r = 0; r < t.length; r++) o = t[r], b.data[o.index] = o, m.data[o.index] = 1;\n        for (m.zeroBorder(); (u = e()) < x.data.length;) i++, n(u);\n        return i;\n      }\n      var p,\n        v,\n        _,\n        g,\n        y,\n        m,\n        x,\n        b,\n        E,\n        C,\n        O,\n        A,\n        R = n(20),\n        w = n(19),\n        T = n(3),\n        S = (n(9), n(65)),\n        D = n(30),\n        P = n(66),\n        I = {\n          clone: n(7),\n          dot: n(32),\n          scale: n(81),\n          transformMat2: n(82)\n        },\n        M = {\n          copy: n(78),\n          create: n(79),\n          invert: n(80)\n        },\n        N = {\n          ctx: {\n            binary: null\n          },\n          dom: {\n            binary: null\n          }\n        },\n        z = {\n          x: 0,\n          y: 0\n        };\n      e.a = {\n        init: function init(t, e) {\n          p = e, O = t, r(), o();\n        },\n        locate: function locate() {\n          var t, e;\n          if (p.halfSample && n.i(w.i)(O, v), a(), t = u(), t.length < z.x * z.y * .05) return null;\n          var r = h(t);\n          return r < 1 ? null : (e = c(r), 0 === e.length ? null : s(e, r));\n        },\n        checkImageConstraints: function checkImageConstraints(t, e) {\n          var r,\n            o,\n            i,\n            a = t.getWidth(),\n            u = t.getHeight(),\n            c = e.halfSample ? .5 : 1;\n          if (t.getConfig().area && (i = n.i(w.j)(a, u, t.getConfig().area), t.setTopRight({\n            x: i.sx,\n            y: i.sy\n          }), t.setCanvasSize({\n            x: a,\n            y: u\n          }), a = i.sw, u = i.sh), o = {\n            x: Math.floor(a * c),\n            y: Math.floor(u * c)\n          }, r = n.i(w.e)(e.patchSize, o), t.setWidth(Math.floor(Math.floor(o.x / r.x) * (1 / c) * r.x)), t.setHeight(Math.floor(Math.floor(o.y / r.y) * (1 / c) * r.y)), t.getWidth() % r.x == 0 && t.getHeight() % r.y == 0) return !0;\n          throw new Error(\"Image dimensions do not comply with the current settings: Width (\" + a + \" )and height (\" + u + \") must a multiple of \" + r.x);\n        }\n      };\n    }).call(e, n(47));\n  }, function (t, e, n) {\n    \"use strict\";\n\n    var r = n(30),\n      o = {\n        createContour2D: function createContour2D() {\n          return {\n            dir: null,\n            index: null,\n            firstVertex: null,\n            insideContours: null,\n            nextpeer: null,\n            prevpeer: null\n          };\n        },\n        CONTOUR_DIR: {\n          CW_DIR: 0,\n          CCW_DIR: 1,\n          UNKNOWN_DIR: 2\n        },\n        DIR: {\n          OUTSIDE_EDGE: -32767,\n          INSIDE_EDGE: -32766\n        },\n        create: function create(t, e) {\n          var n = t.data,\n            i = e.data,\n            a = t.size.x,\n            u = t.size.y,\n            c = r.a.create(t, e);\n          return {\n            rasterize: function rasterize(t) {\n              var e,\n                r,\n                s,\n                f,\n                l,\n                d,\n                h,\n                p,\n                v,\n                _,\n                g,\n                y,\n                m = [],\n                x = 0;\n              for (y = 0; y < 400; y++) m[y] = 0;\n              for (m[0] = n[0], v = null, d = 1; d < u - 1; d++) for (f = 0, r = m[0], l = 1; l < a - 1; l++) if (g = d * a + l, 0 === i[g]) {\n                if ((e = n[g]) !== r) {\n                  if (0 === f) s = x + 1, m[s] = e, r = e, null !== (h = c.contourTracing(d, l, s, e, o.DIR.OUTSIDE_EDGE)) && (x++, f = s, p = o.createContour2D(), p.dir = o.CONTOUR_DIR.CW_DIR, p.index = f, p.firstVertex = h, p.nextpeer = v, p.insideContours = null, null !== v && (v.prevpeer = p), v = p);else if (null !== (h = c.contourTracing(d, l, o.DIR.INSIDE_EDGE, e, f))) {\n                    for (p = o.createContour2D(), p.firstVertex = h, p.insideContours = null, p.dir = 0 === t ? o.CONTOUR_DIR.CCW_DIR : o.CONTOUR_DIR.CW_DIR, p.index = t, _ = v; null !== _ && _.index !== f;) _ = _.nextpeer;\n                    null !== _ && (p.nextpeer = _.insideContours, null !== _.insideContours && (_.insideContours.prevpeer = p), _.insideContours = p);\n                  }\n                } else i[g] = f;\n              } else i[g] === o.DIR.OUTSIDE_EDGE || i[g] === o.DIR.INSIDE_EDGE ? (f = 0, r = i[g] === o.DIR.INSIDE_EDGE ? n[g] : m[0]) : (f = i[g], r = m[f]);\n              for (_ = v; null !== _;) _.index = t, _ = _.nextpeer;\n              return {\n                cc: v,\n                count: x\n              };\n            },\n            debug: {\n              drawContour: function drawContour(t, e) {\n                var n,\n                  r,\n                  i,\n                  a = t.getContext(\"2d\"),\n                  u = e;\n                for (a.strokeStyle = \"red\", a.fillStyle = \"red\", a.lineWidth = 1, n = null !== u ? u.insideContours : null; null !== u;) {\n                  switch (null !== n ? (r = n, n = n.nextpeer) : (r = u, u = u.nextpeer, n = null !== u ? u.insideContours : null), r.dir) {\n                    case o.CONTOUR_DIR.CW_DIR:\n                      a.strokeStyle = \"red\";\n                      break;\n                    case o.CONTOUR_DIR.CCW_DIR:\n                      a.strokeStyle = \"blue\";\n                      break;\n                    case o.CONTOUR_DIR.UNKNOWN_DIR:\n                      a.strokeStyle = \"green\";\n                  }\n                  i = r.firstVertex, a.beginPath(), a.moveTo(i.x, i.y);\n                  do i = i.next, a.lineTo(i.x, i.y); while (i !== r.firstVertex);\n                  a.stroke();\n                }\n              }\n            }\n          };\n        }\n      };\n    e.a = o;\n  }, function (module, __nested_webpack_exports__, __webpack_require__) {\n    \"use strict\";\n\n    function Skeletonizer(stdlib, foreign, buffer) {\n      \"use asm\";\n\n      var images = new stdlib.Uint8Array(buffer),\n        size = foreign.size | 0,\n        imul = stdlib.Math.imul;\n      function erode(inImagePtr, outImagePtr) {\n        inImagePtr = inImagePtr | 0;\n        outImagePtr = outImagePtr | 0;\n        var v = 0,\n          u = 0,\n          sum = 0,\n          yStart1 = 0,\n          yStart2 = 0,\n          xStart1 = 0,\n          xStart2 = 0,\n          offset = 0;\n        for (v = 1; (v | 0) < (size - 1 | 0); v = v + 1 | 0) {\n          offset = offset + size | 0;\n          for (u = 1; (u | 0) < (size - 1 | 0); u = u + 1 | 0) {\n            yStart1 = offset - size | 0;\n            yStart2 = offset + size | 0;\n            xStart1 = u - 1 | 0;\n            xStart2 = u + 1 | 0;\n            sum = (images[inImagePtr + yStart1 + xStart1 | 0] | 0) + (images[inImagePtr + yStart1 + xStart2 | 0] | 0) + (images[inImagePtr + offset + u | 0] | 0) + (images[inImagePtr + yStart2 + xStart1 | 0] | 0) + (images[inImagePtr + yStart2 + xStart2 | 0] | 0) | 0;\n            if ((sum | 0) == (5 | 0)) {\n              images[outImagePtr + offset + u | 0] = 1;\n            } else {\n              images[outImagePtr + offset + u | 0] = 0;\n            }\n          }\n        }\n        return;\n      }\n      function subtract(aImagePtr, bImagePtr, outImagePtr) {\n        aImagePtr = aImagePtr | 0;\n        bImagePtr = bImagePtr | 0;\n        outImagePtr = outImagePtr | 0;\n        var length = 0;\n        length = imul(size, size) | 0;\n        while ((length | 0) > 0) {\n          length = length - 1 | 0;\n          images[outImagePtr + length | 0] = (images[aImagePtr + length | 0] | 0) - (images[bImagePtr + length | 0] | 0) | 0;\n        }\n      }\n      function bitwiseOr(aImagePtr, bImagePtr, outImagePtr) {\n        aImagePtr = aImagePtr | 0;\n        bImagePtr = bImagePtr | 0;\n        outImagePtr = outImagePtr | 0;\n        var length = 0;\n        length = imul(size, size) | 0;\n        while ((length | 0) > 0) {\n          length = length - 1 | 0;\n          images[outImagePtr + length | 0] = images[aImagePtr + length | 0] | 0 | (images[bImagePtr + length | 0] | 0) | 0;\n        }\n      }\n      function countNonZero(imagePtr) {\n        imagePtr = imagePtr | 0;\n        var sum = 0,\n          length = 0;\n        length = imul(size, size) | 0;\n        while ((length | 0) > 0) {\n          length = length - 1 | 0;\n          sum = (sum | 0) + (images[imagePtr + length | 0] | 0) | 0;\n        }\n        return sum | 0;\n      }\n      function init(imagePtr, value) {\n        imagePtr = imagePtr | 0;\n        value = value | 0;\n        var length = 0;\n        length = imul(size, size) | 0;\n        while ((length | 0) > 0) {\n          length = length - 1 | 0;\n          images[imagePtr + length | 0] = value;\n        }\n      }\n      function dilate(inImagePtr, outImagePtr) {\n        inImagePtr = inImagePtr | 0;\n        outImagePtr = outImagePtr | 0;\n        var v = 0,\n          u = 0,\n          sum = 0,\n          yStart1 = 0,\n          yStart2 = 0,\n          xStart1 = 0,\n          xStart2 = 0,\n          offset = 0;\n        for (v = 1; (v | 0) < (size - 1 | 0); v = v + 1 | 0) {\n          offset = offset + size | 0;\n          for (u = 1; (u | 0) < (size - 1 | 0); u = u + 1 | 0) {\n            yStart1 = offset - size | 0;\n            yStart2 = offset + size | 0;\n            xStart1 = u - 1 | 0;\n            xStart2 = u + 1 | 0;\n            sum = (images[inImagePtr + yStart1 + xStart1 | 0] | 0) + (images[inImagePtr + yStart1 + xStart2 | 0] | 0) + (images[inImagePtr + offset + u | 0] | 0) + (images[inImagePtr + yStart2 + xStart1 | 0] | 0) + (images[inImagePtr + yStart2 + xStart2 | 0] | 0) | 0;\n            if ((sum | 0) > (0 | 0)) {\n              images[outImagePtr + offset + u | 0] = 1;\n            } else {\n              images[outImagePtr + offset + u | 0] = 0;\n            }\n          }\n        }\n        return;\n      }\n      function memcpy(srcImagePtr, dstImagePtr) {\n        srcImagePtr = srcImagePtr | 0;\n        dstImagePtr = dstImagePtr | 0;\n        var length = 0;\n        length = imul(size, size) | 0;\n        while ((length | 0) > 0) {\n          length = length - 1 | 0;\n          images[dstImagePtr + length | 0] = images[srcImagePtr + length | 0] | 0;\n        }\n      }\n      function zeroBorder(imagePtr) {\n        imagePtr = imagePtr | 0;\n        var x = 0,\n          y = 0;\n        for (x = 0; (x | 0) < (size - 1 | 0); x = x + 1 | 0) {\n          images[imagePtr + x | 0] = 0;\n          images[imagePtr + y | 0] = 0;\n          y = y + size - 1 | 0;\n          images[imagePtr + y | 0] = 0;\n          y = y + 1 | 0;\n        }\n        for (x = 0; (x | 0) < (size | 0); x = x + 1 | 0) {\n          images[imagePtr + y | 0] = 0;\n          y = y + 1 | 0;\n        }\n      }\n      function skeletonize() {\n        var subImagePtr = 0,\n          erodedImagePtr = 0,\n          tempImagePtr = 0,\n          skelImagePtr = 0,\n          sum = 0,\n          done = 0;\n        erodedImagePtr = imul(size, size) | 0;\n        tempImagePtr = erodedImagePtr + erodedImagePtr | 0;\n        skelImagePtr = tempImagePtr + erodedImagePtr | 0;\n        init(skelImagePtr, 0);\n        zeroBorder(subImagePtr);\n        do {\n          erode(subImagePtr, erodedImagePtr);\n          dilate(erodedImagePtr, tempImagePtr);\n          subtract(subImagePtr, tempImagePtr, tempImagePtr);\n          bitwiseOr(skelImagePtr, tempImagePtr, skelImagePtr);\n          memcpy(erodedImagePtr, subImagePtr);\n          sum = countNonZero(subImagePtr) | 0;\n          done = (sum | 0) == 0 | 0;\n        } while (!done);\n      }\n      return {\n        skeletonize: skeletonize\n      };\n    }\n    __nested_webpack_exports__[\"a\"] = Skeletonizer;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t) {\n      o.a.call(this, t), this.barSpaceRatio = [1, 1];\n    }\n    var o = n(1),\n      i = 1,\n      a = 3,\n      u = {\n        START_PATTERN: {\n          value: [a, i, a, i, i, i]\n        },\n        STOP_PATTERN: {\n          value: [a, i, i, i, a]\n        },\n        CODE_PATTERN: {\n          value: [[i, i, a, a, i], [a, i, i, i, a], [i, a, i, i, a], [a, a, i, i, i], [i, i, a, i, a], [a, i, a, i, i], [i, a, a, i, i], [i, i, i, a, a], [a, i, i, a, i], [i, a, i, a, i]]\n        },\n        SINGLE_CODE_ERROR: {\n          value: .78,\n          writable: !0\n        },\n        AVG_CODE_ERROR: {\n          value: .3,\n          writable: !0\n        },\n        FORMAT: {\n          value: \"2of5\"\n        }\n      },\n      c = u.START_PATTERN.value.reduce(function (t, e) {\n        return t + e;\n      }, 0);\n    r.prototype = Object.create(o.a.prototype, u), r.prototype.constructor = r, r.prototype._findPattern = function (t, e, n, r) {\n      var o,\n        i,\n        a,\n        u,\n        c = [],\n        s = this,\n        f = 0,\n        l = {\n          error: Number.MAX_VALUE,\n          code: -1,\n          start: 0,\n          end: 0\n        },\n        d = s.AVG_CODE_ERROR;\n      for (n = n || !1, r = r || !1, e || (e = s._nextSet(s._row)), o = 0; o < t.length; o++) c[o] = 0;\n      for (o = e; o < s._row.length; o++) if (s._row[o] ^ n) c[f]++;else {\n        if (f === c.length - 1) {\n          for (u = 0, a = 0; a < c.length; a++) u += c[a];\n          if ((i = s._matchPattern(c, t)) < d) return l.error = i, l.start = o - u, l.end = o, l;\n          if (!r) return null;\n          for (a = 0; a < c.length - 2; a++) c[a] = c[a + 2];\n          c[c.length - 2] = 0, c[c.length - 1] = 0, f--;\n        } else f++;\n        c[f] = 1, n = !n;\n      }\n      return null;\n    }, r.prototype._findStart = function () {\n      for (var t, e, n = this, r = n._nextSet(n._row), o = 1; !e;) {\n        if (!(e = n._findPattern(n.START_PATTERN, r, !1, !0))) return null;\n        if (o = Math.floor((e.end - e.start) / c), (t = e.start - 5 * o) >= 0 && n._matchRange(t, e.start, 0)) return e;\n        r = e.end, e = null;\n      }\n    }, r.prototype._verifyTrailingWhitespace = function (t) {\n      var e,\n        n = this;\n      return e = t.end + (t.end - t.start) / 2, e < n._row.length && n._matchRange(t.end, e, 0) ? t : null;\n    }, r.prototype._findEnd = function () {\n      var t,\n        e,\n        n,\n        r = this;\n      return r._row.reverse(), n = r._nextSet(r._row), t = r._findPattern(r.STOP_PATTERN, n, !1, !0), r._row.reverse(), null === t ? null : (e = t.start, t.start = r._row.length - t.end, t.end = r._row.length - e, null !== t ? r._verifyTrailingWhitespace(t) : null);\n    }, r.prototype._decodeCode = function (t) {\n      var e,\n        n,\n        r,\n        o = this,\n        i = 0,\n        a = o.AVG_CODE_ERROR,\n        u = {\n          error: Number.MAX_VALUE,\n          code: -1,\n          start: 0,\n          end: 0\n        };\n      for (e = 0; e < t.length; e++) i += t[e];\n      for (r = 0; r < o.CODE_PATTERN.length; r++) (n = o._matchPattern(t, o.CODE_PATTERN[r])) < u.error && (u.code = r, u.error = n);\n      if (u.error < a) return u;\n    }, r.prototype._decodePayload = function (t, e, n) {\n      for (var r, o, i = this, a = 0, u = t.length, c = [0, 0, 0, 0, 0]; a < u;) {\n        for (r = 0; r < 5; r++) c[r] = t[a] * this.barSpaceRatio[0], a += 2;\n        if (!(o = i._decodeCode(c))) return null;\n        e.push(o.code + \"\"), n.push(o);\n      }\n      return o;\n    }, r.prototype._verifyCounterLength = function (t) {\n      return t.length % 10 == 0;\n    }, r.prototype._decode = function () {\n      var t,\n        e,\n        n,\n        r = this,\n        o = [],\n        i = [];\n      return (t = r._findStart()) ? (i.push(t), (e = r._findEnd()) ? (n = r._fillCounters(t.end, e.start, !1), r._verifyCounterLength(n) && r._decodePayload(n, o, i) ? o.length < 5 ? null : (i.push(e), {\n        code: o.join(\"\"),\n        start: t.start,\n        end: e.end,\n        startInfo: t,\n        decodedCodes: i\n      }) : null) : null) : null;\n    }, e.a = r;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r() {\n      o.a.call(this), this._counters = [];\n    }\n    var o = n(1),\n      i = {\n        ALPHABETH_STRING: {\n          value: \"0123456789-$:/.+ABCD\"\n        },\n        ALPHABET: {\n          value: [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 36, 58, 47, 46, 43, 65, 66, 67, 68]\n        },\n        CHARACTER_ENCODINGS: {\n          value: [3, 6, 9, 96, 18, 66, 33, 36, 48, 72, 12, 24, 69, 81, 84, 21, 26, 41, 11, 14]\n        },\n        START_END: {\n          value: [26, 41, 11, 14]\n        },\n        MIN_ENCODED_CHARS: {\n          value: 4\n        },\n        MAX_ACCEPTABLE: {\n          value: 2\n        },\n        PADDING: {\n          value: 1.5\n        },\n        FORMAT: {\n          value: \"codabar\",\n          writeable: !1\n        }\n      };\n    r.prototype = Object.create(o.a.prototype, i), r.prototype.constructor = r, r.prototype._decode = function () {\n      var t,\n        e,\n        n,\n        r,\n        o,\n        i = this,\n        a = [];\n      if (this._counters = i._fillCounters(), !(t = i._findStart())) return null;\n      r = t.startCounter;\n      do {\n        if ((n = i._toPattern(r)) < 0) return null;\n        if ((e = i._patternToChar(n)) < 0) return null;\n        if (a.push(e), r += 8, a.length > 1 && i._isStartEnd(n)) break;\n      } while (r < i._counters.length);\n      return a.length - 2 < i.MIN_ENCODED_CHARS || !i._isStartEnd(n) ? null : i._verifyWhitespace(t.startCounter, r - 8) && i._validateResult(a, t.startCounter) ? (r = r > i._counters.length ? i._counters.length : r, o = t.start + i._sumCounters(t.startCounter, r - 8), {\n        code: a.join(\"\"),\n        start: t.start,\n        end: o,\n        startInfo: t,\n        decodedCodes: a\n      }) : null;\n    }, r.prototype._verifyWhitespace = function (t, e) {\n      return (t - 1 <= 0 || this._counters[t - 1] >= this._calculatePatternLength(t) / 2) && (e + 8 >= this._counters.length || this._counters[e + 7] >= this._calculatePatternLength(e) / 2);\n    }, r.prototype._calculatePatternLength = function (t) {\n      var e,\n        n = 0;\n      for (e = t; e < t + 7; e++) n += this._counters[e];\n      return n;\n    }, r.prototype._thresholdResultPattern = function (t, e) {\n      var n,\n        r,\n        o,\n        i,\n        a,\n        u = this,\n        c = {\n          space: {\n            narrow: {\n              size: 0,\n              counts: 0,\n              min: 0,\n              max: Number.MAX_VALUE\n            },\n            wide: {\n              size: 0,\n              counts: 0,\n              min: 0,\n              max: Number.MAX_VALUE\n            }\n          },\n          bar: {\n            narrow: {\n              size: 0,\n              counts: 0,\n              min: 0,\n              max: Number.MAX_VALUE\n            },\n            wide: {\n              size: 0,\n              counts: 0,\n              min: 0,\n              max: Number.MAX_VALUE\n            }\n          }\n        },\n        s = e;\n      for (o = 0; o < t.length; o++) {\n        for (a = u._charToPattern(t[o]), i = 6; i >= 0; i--) n = 2 == (1 & i) ? c.bar : c.space, r = 1 == (1 & a) ? n.wide : n.narrow, r.size += u._counters[s + i], r.counts++, a >>= 1;\n        s += 8;\n      }\n      return [\"space\", \"bar\"].forEach(function (t) {\n        var e = c[t];\n        e.wide.min = Math.floor((e.narrow.size / e.narrow.counts + e.wide.size / e.wide.counts) / 2), e.narrow.max = Math.ceil(e.wide.min), e.wide.max = Math.ceil((e.wide.size * u.MAX_ACCEPTABLE + u.PADDING) / e.wide.counts);\n      }), c;\n    }, r.prototype._charToPattern = function (t) {\n      var e,\n        n = this,\n        r = t.charCodeAt(0);\n      for (e = 0; e < n.ALPHABET.length; e++) if (n.ALPHABET[e] === r) return n.CHARACTER_ENCODINGS[e];\n      return 0;\n    }, r.prototype._validateResult = function (t, e) {\n      var n,\n        r,\n        o,\n        i,\n        a,\n        u,\n        c = this,\n        s = c._thresholdResultPattern(t, e),\n        f = e;\n      for (n = 0; n < t.length; n++) {\n        for (u = c._charToPattern(t[n]), r = 6; r >= 0; r--) {\n          if (o = 0 == (1 & r) ? s.bar : s.space, i = 1 == (1 & u) ? o.wide : o.narrow, (a = c._counters[f + r]) < i.min || a > i.max) return !1;\n          u >>= 1;\n        }\n        f += 8;\n      }\n      return !0;\n    }, r.prototype._patternToChar = function (t) {\n      var e,\n        n = this;\n      for (e = 0; e < n.CHARACTER_ENCODINGS.length; e++) if (n.CHARACTER_ENCODINGS[e] === t) return String.fromCharCode(n.ALPHABET[e]);\n      return -1;\n    }, r.prototype._computeAlternatingThreshold = function (t, e) {\n      var n,\n        r,\n        o = Number.MAX_VALUE,\n        i = 0;\n      for (n = t; n < e; n += 2) r = this._counters[n], r > i && (i = r), r < o && (o = r);\n      return (o + i) / 2 | 0;\n    }, r.prototype._toPattern = function (t) {\n      var e,\n        n,\n        r,\n        o,\n        i = 7,\n        a = t + i,\n        u = 1 << i - 1,\n        c = 0;\n      if (a > this._counters.length) return -1;\n      for (e = this._computeAlternatingThreshold(t, a), n = this._computeAlternatingThreshold(t + 1, a), r = 0; r < i; r++) o = 0 == (1 & r) ? e : n, this._counters[t + r] > o && (c |= u), u >>= 1;\n      return c;\n    }, r.prototype._isStartEnd = function (t) {\n      var e;\n      for (e = 0; e < this.START_END.length; e++) if (this.START_END[e] === t) return !0;\n      return !1;\n    }, r.prototype._sumCounters = function (t, e) {\n      var n,\n        r = 0;\n      for (n = t; n < e; n++) r += this._counters[n];\n      return r;\n    }, r.prototype._findStart = function () {\n      var t,\n        e,\n        n,\n        r = this,\n        o = r._nextUnset(r._row);\n      for (t = 1; t < this._counters.length; t++) if ((e = r._toPattern(t)) !== -1 && r._isStartEnd(e)) return o += r._sumCounters(0, t), n = o + r._sumCounters(t, t + 8), {\n        start: o,\n        end: n,\n        startCounter: t,\n        endCounter: t + 8\n      };\n    }, e.a = r;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r() {\n      i.a.call(this);\n    }\n    function o(t, e, n) {\n      for (var r = n.length, o = 0, i = 0; r--;) i += t[n[r]], o += e[n[r]];\n      return i / o;\n    }\n    var i = n(1),\n      a = {\n        CODE_SHIFT: {\n          value: 98\n        },\n        CODE_C: {\n          value: 99\n        },\n        CODE_B: {\n          value: 100\n        },\n        CODE_A: {\n          value: 101\n        },\n        START_CODE_A: {\n          value: 103\n        },\n        START_CODE_B: {\n          value: 104\n        },\n        START_CODE_C: {\n          value: 105\n        },\n        STOP_CODE: {\n          value: 106\n        },\n        CODE_PATTERN: {\n          value: [[2, 1, 2, 2, 2, 2], [2, 2, 2, 1, 2, 2], [2, 2, 2, 2, 2, 1], [1, 2, 1, 2, 2, 3], [1, 2, 1, 3, 2, 2], [1, 3, 1, 2, 2, 2], [1, 2, 2, 2, 1, 3], [1, 2, 2, 3, 1, 2], [1, 3, 2, 2, 1, 2], [2, 2, 1, 2, 1, 3], [2, 2, 1, 3, 1, 2], [2, 3, 1, 2, 1, 2], [1, 1, 2, 2, 3, 2], [1, 2, 2, 1, 3, 2], [1, 2, 2, 2, 3, 1], [1, 1, 3, 2, 2, 2], [1, 2, 3, 1, 2, 2], [1, 2, 3, 2, 2, 1], [2, 2, 3, 2, 1, 1], [2, 2, 1, 1, 3, 2], [2, 2, 1, 2, 3, 1], [2, 1, 3, 2, 1, 2], [2, 2, 3, 1, 1, 2], [3, 1, 2, 1, 3, 1], [3, 1, 1, 2, 2, 2], [3, 2, 1, 1, 2, 2], [3, 2, 1, 2, 2, 1], [3, 1, 2, 2, 1, 2], [3, 2, 2, 1, 1, 2], [3, 2, 2, 2, 1, 1], [2, 1, 2, 1, 2, 3], [2, 1, 2, 3, 2, 1], [2, 3, 2, 1, 2, 1], [1, 1, 1, 3, 2, 3], [1, 3, 1, 1, 2, 3], [1, 3, 1, 3, 2, 1], [1, 1, 2, 3, 1, 3], [1, 3, 2, 1, 1, 3], [1, 3, 2, 3, 1, 1], [2, 1, 1, 3, 1, 3], [2, 3, 1, 1, 1, 3], [2, 3, 1, 3, 1, 1], [1, 1, 2, 1, 3, 3], [1, 1, 2, 3, 3, 1], [1, 3, 2, 1, 3, 1], [1, 1, 3, 1, 2, 3], [1, 1, 3, 3, 2, 1], [1, 3, 3, 1, 2, 1], [3, 1, 3, 1, 2, 1], [2, 1, 1, 3, 3, 1], [2, 3, 1, 1, 3, 1], [2, 1, 3, 1, 1, 3], [2, 1, 3, 3, 1, 1], [2, 1, 3, 1, 3, 1], [3, 1, 1, 1, 2, 3], [3, 1, 1, 3, 2, 1], [3, 3, 1, 1, 2, 1], [3, 1, 2, 1, 1, 3], [3, 1, 2, 3, 1, 1], [3, 3, 2, 1, 1, 1], [3, 1, 4, 1, 1, 1], [2, 2, 1, 4, 1, 1], [4, 3, 1, 1, 1, 1], [1, 1, 1, 2, 2, 4], [1, 1, 1, 4, 2, 2], [1, 2, 1, 1, 2, 4], [1, 2, 1, 4, 2, 1], [1, 4, 1, 1, 2, 2], [1, 4, 1, 2, 2, 1], [1, 1, 2, 2, 1, 4], [1, 1, 2, 4, 1, 2], [1, 2, 2, 1, 1, 4], [1, 2, 2, 4, 1, 1], [1, 4, 2, 1, 1, 2], [1, 4, 2, 2, 1, 1], [2, 4, 1, 2, 1, 1], [2, 2, 1, 1, 1, 4], [4, 1, 3, 1, 1, 1], [2, 4, 1, 1, 1, 2], [1, 3, 4, 1, 1, 1], [1, 1, 1, 2, 4, 2], [1, 2, 1, 1, 4, 2], [1, 2, 1, 2, 4, 1], [1, 1, 4, 2, 1, 2], [1, 2, 4, 1, 1, 2], [1, 2, 4, 2, 1, 1], [4, 1, 1, 2, 1, 2], [4, 2, 1, 1, 1, 2], [4, 2, 1, 2, 1, 1], [2, 1, 2, 1, 4, 1], [2, 1, 4, 1, 2, 1], [4, 1, 2, 1, 2, 1], [1, 1, 1, 1, 4, 3], [1, 1, 1, 3, 4, 1], [1, 3, 1, 1, 4, 1], [1, 1, 4, 1, 1, 3], [1, 1, 4, 3, 1, 1], [4, 1, 1, 1, 1, 3], [4, 1, 1, 3, 1, 1], [1, 1, 3, 1, 4, 1], [1, 1, 4, 1, 3, 1], [3, 1, 1, 1, 4, 1], [4, 1, 1, 1, 3, 1], [2, 1, 1, 4, 1, 2], [2, 1, 1, 2, 1, 4], [2, 1, 1, 2, 3, 2], [2, 3, 3, 1, 1, 1, 2]]\n        },\n        SINGLE_CODE_ERROR: {\n          value: .64\n        },\n        AVG_CODE_ERROR: {\n          value: .3\n        },\n        FORMAT: {\n          value: \"code_128\",\n          writeable: !1\n        },\n        MODULE_INDICES: {\n          value: {\n            bar: [0, 2, 4],\n            space: [1, 3, 5]\n          }\n        }\n      };\n    r.prototype = Object.create(i.a.prototype, a), r.prototype.constructor = r, r.prototype._decodeCode = function (t, e) {\n      var n,\n        r,\n        i,\n        a = [0, 0, 0, 0, 0, 0],\n        u = this,\n        c = t,\n        s = !u._row[c],\n        f = 0,\n        l = {\n          error: Number.MAX_VALUE,\n          code: -1,\n          start: t,\n          end: t,\n          correction: {\n            bar: 1,\n            space: 1\n          }\n        };\n      for (n = c; n < u._row.length; n++) if (u._row[n] ^ s) a[f]++;else {\n        if (f === a.length - 1) {\n          for (e && u._correct(a, e), r = 0; r < u.CODE_PATTERN.length; r++) (i = u._matchPattern(a, u.CODE_PATTERN[r])) < l.error && (l.code = r, l.error = i);\n          return l.end = n, l.code === -1 || l.error > u.AVG_CODE_ERROR ? null : (u.CODE_PATTERN[l.code] && (l.correction.bar = o(u.CODE_PATTERN[l.code], a, this.MODULE_INDICES.bar), l.correction.space = o(u.CODE_PATTERN[l.code], a, this.MODULE_INDICES.space)), l);\n        }\n        f++, a[f] = 1, s = !s;\n      }\n      return null;\n    }, r.prototype._correct = function (t, e) {\n      this._correctBars(t, e.bar, this.MODULE_INDICES.bar), this._correctBars(t, e.space, this.MODULE_INDICES.space);\n    }, r.prototype._findStart = function () {\n      var t,\n        e,\n        n,\n        r,\n        i,\n        a = [0, 0, 0, 0, 0, 0],\n        u = this,\n        c = u._nextSet(u._row),\n        s = !1,\n        f = 0,\n        l = {\n          error: Number.MAX_VALUE,\n          code: -1,\n          start: 0,\n          end: 0,\n          correction: {\n            bar: 1,\n            space: 1\n          }\n        };\n      for (t = c; t < u._row.length; t++) if (u._row[t] ^ s) a[f]++;else {\n        if (f === a.length - 1) {\n          for (i = 0, r = 0; r < a.length; r++) i += a[r];\n          for (e = u.START_CODE_A; e <= u.START_CODE_C; e++) (n = u._matchPattern(a, u.CODE_PATTERN[e])) < l.error && (l.code = e, l.error = n);\n          if (l.error < u.AVG_CODE_ERROR) return l.start = t - i, l.end = t, l.correction.bar = o(u.CODE_PATTERN[l.code], a, this.MODULE_INDICES.bar), l.correction.space = o(u.CODE_PATTERN[l.code], a, this.MODULE_INDICES.space), l;\n          for (r = 0; r < 4; r++) a[r] = a[r + 2];\n          a[4] = 0, a[5] = 0, f--;\n        } else f++;\n        a[f] = 1, s = !s;\n      }\n      return null;\n    }, r.prototype._decode = function () {\n      var t,\n        e,\n        n = this,\n        r = n._findStart(),\n        o = null,\n        i = !1,\n        a = [],\n        u = 0,\n        c = 0,\n        s = [],\n        f = [],\n        l = !1,\n        d = !0;\n      if (null === r) return null;\n      switch (o = {\n        code: r.code,\n        start: r.start,\n        end: r.end,\n        correction: {\n          bar: r.correction.bar,\n          space: r.correction.space\n        }\n      }, f.push(o), c = o.code, o.code) {\n        case n.START_CODE_A:\n          t = n.CODE_A;\n          break;\n        case n.START_CODE_B:\n          t = n.CODE_B;\n          break;\n        case n.START_CODE_C:\n          t = n.CODE_C;\n          break;\n        default:\n          return null;\n      }\n      for (; !i;) {\n        if (e = l, l = !1, null !== (o = n._decodeCode(o.end, o.correction))) switch (o.code !== n.STOP_CODE && (d = !0), o.code !== n.STOP_CODE && (s.push(o.code), u++, c += u * o.code), f.push(o), t) {\n          case n.CODE_A:\n            if (o.code < 64) a.push(String.fromCharCode(32 + o.code));else if (o.code < 96) a.push(String.fromCharCode(o.code - 64));else switch (o.code !== n.STOP_CODE && (d = !1), o.code) {\n              case n.CODE_SHIFT:\n                l = !0, t = n.CODE_B;\n                break;\n              case n.CODE_B:\n                t = n.CODE_B;\n                break;\n              case n.CODE_C:\n                t = n.CODE_C;\n                break;\n              case n.STOP_CODE:\n                i = !0;\n            }\n            break;\n          case n.CODE_B:\n            if (o.code < 96) a.push(String.fromCharCode(32 + o.code));else switch (o.code !== n.STOP_CODE && (d = !1), o.code) {\n              case n.CODE_SHIFT:\n                l = !0, t = n.CODE_A;\n                break;\n              case n.CODE_A:\n                t = n.CODE_A;\n                break;\n              case n.CODE_C:\n                t = n.CODE_C;\n                break;\n              case n.STOP_CODE:\n                i = !0;\n            }\n            break;\n          case n.CODE_C:\n            if (o.code < 100) a.push(o.code < 10 ? \"0\" + o.code : o.code);else switch (o.code !== n.STOP_CODE && (d = !1), o.code) {\n              case n.CODE_A:\n                t = n.CODE_A;\n                break;\n              case n.CODE_B:\n                t = n.CODE_B;\n                break;\n              case n.STOP_CODE:\n                i = !0;\n            }\n        } else i = !0;\n        e && (t = t === n.CODE_A ? n.CODE_B : n.CODE_A);\n      }\n      return null === o ? null : (o.end = n._nextUnset(n._row, o.end), n._verifyTrailingWhitespace(o) ? (c -= u * s[s.length - 1]) % 103 !== s[s.length - 1] ? null : a.length ? (d && a.splice(a.length - 1, 1), {\n        code: a.join(\"\"),\n        start: r.start,\n        end: o.end,\n        codeset: t,\n        startInfo: r,\n        decodedCodes: f,\n        endInfo: o\n      }) : null : null);\n    }, i.a.prototype._verifyTrailingWhitespace = function (t) {\n      var e,\n        n = this;\n      return e = t.end + (t.end - t.start) / 2, e < n._row.length && n._matchRange(t.end, e, 0) ? t : null;\n    }, e.a = r;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r() {\n      o.a.call(this);\n    }\n    var o = n(31),\n      i = {\n        IOQ: /[IOQ]/g,\n        AZ09: /[A-Z0-9]{17}/\n      };\n    r.prototype = Object.create(o.a.prototype), r.prototype.constructor = r, r.prototype._decode = function () {\n      var t = o.a.prototype._decode.apply(this);\n      if (!t) return null;\n      var e = t.code;\n      return e ? (e = e.replace(i.IOQ, \"\"), e.match(i.AZ09) && this._checkChecksum(e) ? (t.code = e, t) : null) : null;\n    }, r.prototype._checkChecksum = function (t) {\n      return !!t;\n    }, e.a = r;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r() {\n      o.a.call(this);\n    }\n    var o = n(1),\n      i = n(3),\n      a = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%abcd*\",\n      u = {\n        ALPHABETH_STRING: {\n          value: a\n        },\n        ALPHABET: {\n          value: a.split(\"\").map(function (t) {\n            return t.charCodeAt(0);\n          })\n        },\n        CHARACTER_ENCODINGS: {\n          value: [276, 328, 324, 322, 296, 292, 290, 336, 274, 266, 424, 420, 418, 404, 402, 394, 360, 356, 354, 308, 282, 344, 332, 326, 300, 278, 436, 434, 428, 422, 406, 410, 364, 358, 310, 314, 302, 468, 466, 458, 366, 374, 430, 294, 474, 470, 306, 350]\n        },\n        ASTERISK: {\n          value: 350\n        },\n        FORMAT: {\n          value: \"code_93\",\n          writeable: !1\n        }\n      };\n    r.prototype = Object.create(o.a.prototype, u), r.prototype.constructor = r, r.prototype._decode = function () {\n      var t,\n        e,\n        n,\n        r,\n        o = this,\n        a = [0, 0, 0, 0, 0, 0],\n        u = [],\n        c = o._findStart();\n      if (!c) return null;\n      r = o._nextSet(o._row, c.end);\n      do {\n        if (a = o._toCounters(r, a), (n = o._toPattern(a)) < 0) return null;\n        if ((t = o._patternToChar(n)) < 0) return null;\n        u.push(t), e = r, r += i.a.sum(a), r = o._nextSet(o._row, r);\n      } while (\"*\" !== t);\n      return u.pop(), u.length && o._verifyEnd(e, r, a) && o._verifyChecksums(u) ? (u = u.slice(0, u.length - 2), null === (u = o._decodeExtended(u)) ? null : {\n        code: u.join(\"\"),\n        start: c.start,\n        end: r,\n        startInfo: c,\n        decodedCodes: u\n      }) : null;\n    }, r.prototype._verifyEnd = function (t, e) {\n      return !(t === e || !this._row[e]);\n    }, r.prototype._patternToChar = function (t) {\n      var e,\n        n = this;\n      for (e = 0; e < n.CHARACTER_ENCODINGS.length; e++) if (n.CHARACTER_ENCODINGS[e] === t) return String.fromCharCode(n.ALPHABET[e]);\n      return -1;\n    }, r.prototype._toPattern = function (t) {\n      for (var e = t.length, n = 0, r = 0, o = 0; o < e; o++) r += t[o];\n      for (var i = 0; i < e; i++) {\n        var a = Math.round(9 * t[i] / r);\n        if (a < 1 || a > 4) return -1;\n        if (0 == (1 & i)) for (var u = 0; u < a; u++) n = n << 1 | 1;else n <<= a;\n      }\n      return n;\n    }, r.prototype._findStart = function () {\n      var t,\n        e,\n        n,\n        r = this,\n        o = r._nextSet(r._row),\n        i = o,\n        a = [0, 0, 0, 0, 0, 0],\n        u = 0,\n        c = !1;\n      for (t = o; t < r._row.length; t++) if (r._row[t] ^ c) a[u]++;else {\n        if (u === a.length - 1) {\n          if (r._toPattern(a) === r.ASTERISK && (n = Math.floor(Math.max(0, i - (t - i) / 4)), r._matchRange(n, i, 0))) return {\n            start: i,\n            end: t\n          };\n          for (i += a[0] + a[1], e = 0; e < 4; e++) a[e] = a[e + 2];\n          a[4] = 0, a[5] = 0, u--;\n        } else u++;\n        a[u] = 1, c = !c;\n      }\n      return null;\n    }, r.prototype._decodeExtended = function (t) {\n      for (var e = t.length, n = [], r = 0; r < e; r++) {\n        var o = t[r];\n        if (o >= \"a\" && o <= \"d\") {\n          if (r > e - 2) return null;\n          var i = t[++r],\n            a = i.charCodeAt(0),\n            u = void 0;\n          switch (o) {\n            case \"a\":\n              if (!(i >= \"A\" && i <= \"Z\")) return null;\n              u = String.fromCharCode(a - 64);\n              break;\n            case \"b\":\n              if (i >= \"A\" && i <= \"E\") u = String.fromCharCode(a - 38);else if (i >= \"F\" && i <= \"J\") u = String.fromCharCode(a - 11);else if (i >= \"K\" && i <= \"O\") u = String.fromCharCode(a + 16);else if (i >= \"P\" && i <= \"S\") u = String.fromCharCode(a + 43);else {\n                if (!(i >= \"T\" && i <= \"Z\")) return null;\n                u = String.fromCharCode(127);\n              }\n              break;\n            case \"c\":\n              if (i >= \"A\" && i <= \"O\") u = String.fromCharCode(a - 32);else {\n                if (\"Z\" !== i) return null;\n                u = \":\";\n              }\n              break;\n            case \"d\":\n              if (!(i >= \"A\" && i <= \"Z\")) return null;\n              u = String.fromCharCode(a + 32);\n          }\n          n.push(u);\n        } else n.push(o);\n      }\n      return n;\n    }, r.prototype._verifyChecksums = function (t) {\n      return this._matchCheckChar(t, t.length - 2, 20) && this._matchCheckChar(t, t.length - 1, 15);\n    }, r.prototype._matchCheckChar = function (t, e, n) {\n      var r = this,\n        o = t.slice(0, e),\n        i = o.length,\n        a = o.reduce(function (t, e, o) {\n          return t + ((o * -1 + (i - 1)) % n + 1) * r.ALPHABET.indexOf(e.charCodeAt(0));\n        }, 0);\n      return this.ALPHABET[a % 47] === t[e].charCodeAt(0);\n    }, e.a = r;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r() {\n      o.a.call(this);\n    }\n    var o = n(4),\n      i = {\n        FORMAT: {\n          value: \"ean_2\",\n          writeable: !1\n        }\n      };\n    r.prototype = Object.create(o.a.prototype, i), r.prototype.constructor = r, r.prototype.decode = function (t, e) {\n      this._row = t;\n      var n,\n        r = 0,\n        o = 0,\n        i = e,\n        a = this._row.length,\n        u = [],\n        c = [];\n      for (o = 0; o < 2 && i < a; o++) {\n        if (!(n = this._decodeCode(i))) return null;\n        c.push(n), u.push(n.code % 10), n.code >= this.CODE_G_START && (r |= 1 << 1 - o), 1 != o && (i = this._nextSet(this._row, n.end), i = this._nextUnset(this._row, i));\n      }\n      return 2 != u.length || parseInt(u.join(\"\")) % 4 !== r ? null : {\n        code: u.join(\"\"),\n        decodedCodes: c,\n        end: n.end\n      };\n    }, e.a = r;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r() {\n      a.a.call(this);\n    }\n    function o(t) {\n      var e;\n      for (e = 0; e < 10; e++) if (t === c[e]) return e;\n      return null;\n    }\n    function i(t) {\n      var e,\n        n = t.length,\n        r = 0;\n      for (e = n - 2; e >= 0; e -= 2) r += t[e];\n      for (r *= 3, e = n - 1; e >= 0; e -= 2) r += t[e];\n      return (r *= 3) % 10;\n    }\n    var a = n(4),\n      u = {\n        FORMAT: {\n          value: \"ean_5\",\n          writeable: !1\n        }\n      },\n      c = [24, 20, 18, 17, 12, 6, 3, 10, 9, 5];\n    r.prototype = Object.create(a.a.prototype, u), r.prototype.constructor = r, r.prototype.decode = function (t, e) {\n      this._row = t;\n      var n,\n        r = 0,\n        a = 0,\n        u = e,\n        c = this._row.length,\n        s = [],\n        f = [];\n      for (a = 0; a < 5 && u < c; a++) {\n        if (!(n = this._decodeCode(u))) return null;\n        f.push(n), s.push(n.code % 10), n.code >= this.CODE_G_START && (r |= 1 << 4 - a), 4 != a && (u = this._nextSet(this._row, n.end), u = this._nextUnset(this._row, u));\n      }\n      return 5 != s.length ? null : i(s) !== o(r) ? null : {\n        code: s.join(\"\"),\n        decodedCodes: f,\n        end: n.end\n      };\n    }, e.a = r;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t, e) {\n      o.a.call(this, t, e);\n    }\n    var o = n(4),\n      i = {\n        FORMAT: {\n          value: \"ean_8\",\n          writeable: !1\n        }\n      };\n    r.prototype = Object.create(o.a.prototype, i), r.prototype.constructor = r, r.prototype._decodePayload = function (t, e, n) {\n      var r,\n        o = this;\n      for (r = 0; r < 4; r++) {\n        if (!(t = o._decodeCode(t.end, o.CODE_G_START))) return null;\n        e.push(t.code), n.push(t);\n      }\n      if (null === (t = o._findPattern(o.MIDDLE_PATTERN, t.end, !0, !1))) return null;\n      for (n.push(t), r = 0; r < 4; r++) {\n        if (!(t = o._decodeCode(t.end, o.CODE_G_START))) return null;\n        n.push(t), e.push(t.code);\n      }\n      return t;\n    }, e.a = r;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t) {\n      t = a()(o(), t), u.a.call(this, t), this.barSpaceRatio = [1, 1], t.normalizeBarSpaceWidth && (this.SINGLE_CODE_ERROR = .38, this.AVG_CODE_ERROR = .09);\n    }\n    function o() {\n      var t = {};\n      return Object.keys(r.CONFIG_KEYS).forEach(function (e) {\n        t[e] = r.CONFIG_KEYS[e][\"default\"];\n      }), t;\n    }\n    var i = n(28),\n      a = n.n(i),\n      u = n(1),\n      c = 1,\n      s = 3,\n      f = {\n        START_PATTERN: {\n          value: [c, c, c, c]\n        },\n        STOP_PATTERN: {\n          value: [c, c, s]\n        },\n        CODE_PATTERN: {\n          value: [[c, c, s, s, c], [s, c, c, c, s], [c, s, c, c, s], [s, s, c, c, c], [c, c, s, c, s], [s, c, s, c, c], [c, s, s, c, c], [c, c, c, s, s], [s, c, c, s, c], [c, s, c, s, c]]\n        },\n        SINGLE_CODE_ERROR: {\n          value: .78,\n          writable: !0\n        },\n        AVG_CODE_ERROR: {\n          value: .38,\n          writable: !0\n        },\n        MAX_CORRECTION_FACTOR: {\n          value: 5\n        },\n        FORMAT: {\n          value: \"i2of5\"\n        }\n      };\n    r.prototype = Object.create(u.a.prototype, f), r.prototype.constructor = r, r.prototype._matchPattern = function (t, e) {\n      if (this.config.normalizeBarSpaceWidth) {\n        var n,\n          r = [0, 0],\n          o = [0, 0],\n          i = [0, 0],\n          a = this.MAX_CORRECTION_FACTOR,\n          c = 1 / a;\n        for (n = 0; n < t.length; n++) r[n % 2] += t[n], o[n % 2] += e[n];\n        for (i[0] = o[0] / r[0], i[1] = o[1] / r[1], i[0] = Math.max(Math.min(i[0], a), c), i[1] = Math.max(Math.min(i[1], a), c), this.barSpaceRatio = i, n = 0; n < t.length; n++) t[n] *= this.barSpaceRatio[n % 2];\n      }\n      return u.a.prototype._matchPattern.call(this, t, e);\n    }, r.prototype._findPattern = function (t, e, n, r) {\n      var o,\n        i,\n        a,\n        u,\n        c = [],\n        s = this,\n        f = 0,\n        l = {\n          error: Number.MAX_VALUE,\n          code: -1,\n          start: 0,\n          end: 0\n        },\n        d = s.AVG_CODE_ERROR;\n      for (n = n || !1, r = r || !1, e || (e = s._nextSet(s._row)), o = 0; o < t.length; o++) c[o] = 0;\n      for (o = e; o < s._row.length; o++) if (s._row[o] ^ n) c[f]++;else {\n        if (f === c.length - 1) {\n          for (u = 0, a = 0; a < c.length; a++) u += c[a];\n          if ((i = s._matchPattern(c, t)) < d) return l.error = i, l.start = o - u, l.end = o, l;\n          if (!r) return null;\n          for (a = 0; a < c.length - 2; a++) c[a] = c[a + 2];\n          c[c.length - 2] = 0, c[c.length - 1] = 0, f--;\n        } else f++;\n        c[f] = 1, n = !n;\n      }\n      return null;\n    }, r.prototype._findStart = function () {\n      for (var t, e, n = this, r = n._nextSet(n._row), o = 1; !e;) {\n        if (!(e = n._findPattern(n.START_PATTERN, r, !1, !0))) return null;\n        if (o = Math.floor((e.end - e.start) / 4), (t = e.start - 10 * o) >= 0 && n._matchRange(t, e.start, 0)) return e;\n        r = e.end, e = null;\n      }\n    }, r.prototype._verifyTrailingWhitespace = function (t) {\n      var e,\n        n = this;\n      return e = t.end + (t.end - t.start) / 2, e < n._row.length && n._matchRange(t.end, e, 0) ? t : null;\n    }, r.prototype._findEnd = function () {\n      var t,\n        e,\n        n = this;\n      return n._row.reverse(), t = n._findPattern(n.STOP_PATTERN), n._row.reverse(), null === t ? null : (e = t.start, t.start = n._row.length - t.end, t.end = n._row.length - e, null !== t ? n._verifyTrailingWhitespace(t) : null);\n    }, r.prototype._decodePair = function (t) {\n      var e,\n        n,\n        r = [],\n        o = this;\n      for (e = 0; e < t.length; e++) {\n        if (!(n = o._decodeCode(t[e]))) return null;\n        r.push(n);\n      }\n      return r;\n    }, r.prototype._decodeCode = function (t) {\n      var e,\n        n,\n        r,\n        o = this,\n        i = 0,\n        a = o.AVG_CODE_ERROR,\n        u = {\n          error: Number.MAX_VALUE,\n          code: -1,\n          start: 0,\n          end: 0\n        };\n      for (e = 0; e < t.length; e++) i += t[e];\n      for (r = 0; r < o.CODE_PATTERN.length; r++) (n = o._matchPattern(t, o.CODE_PATTERN[r])) < u.error && (u.code = r, u.error = n);\n      if (u.error < a) return u;\n    }, r.prototype._decodePayload = function (t, e, n) {\n      for (var r, o, i = this, a = 0, u = t.length, c = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]; a < u;) {\n        for (r = 0; r < 5; r++) c[0][r] = t[a] * this.barSpaceRatio[0], c[1][r] = t[a + 1] * this.barSpaceRatio[1], a += 2;\n        if (!(o = i._decodePair(c))) return null;\n        for (r = 0; r < o.length; r++) e.push(o[r].code + \"\"), n.push(o[r]);\n      }\n      return o;\n    }, r.prototype._verifyCounterLength = function (t) {\n      return t.length % 10 == 0;\n    }, r.prototype._decode = function () {\n      var t,\n        e,\n        n,\n        r = this,\n        o = [],\n        i = [];\n      return (t = r._findStart()) ? (i.push(t), (e = r._findEnd()) ? (n = r._fillCounters(t.end, e.start, !1), r._verifyCounterLength(n) && r._decodePayload(n, o, i) ? o.length % 2 != 0 || o.length < 6 ? null : (i.push(e), {\n        code: o.join(\"\"),\n        start: t.start,\n        end: e.end,\n        startInfo: t,\n        decodedCodes: i\n      }) : null) : null) : null;\n    }, r.CONFIG_KEYS = {\n      normalizeBarSpaceWidth: {\n        type: \"boolean\",\n        \"default\": !1,\n        description: \"If true, the reader tries to normalize thewidth-difference between bars and spaces\"\n      }\n    }, e.a = r;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t, e) {\n      o.a.call(this, t, e);\n    }\n    var o = n(4),\n      i = {\n        CODE_FREQUENCY: {\n          value: [[56, 52, 50, 49, 44, 38, 35, 42, 41, 37], [7, 11, 13, 14, 19, 25, 28, 21, 22, 26]]\n        },\n        STOP_PATTERN: {\n          value: [1 / 6 * 7, 1 / 6 * 7, 1 / 6 * 7, 1 / 6 * 7, 1 / 6 * 7, 1 / 6 * 7]\n        },\n        FORMAT: {\n          value: \"upc_e\",\n          writeable: !1\n        }\n      };\n    r.prototype = Object.create(o.a.prototype, i), r.prototype.constructor = r, r.prototype._decodePayload = function (t, e, n) {\n      var r,\n        o = this,\n        i = 0;\n      for (r = 0; r < 6; r++) {\n        if (!(t = o._decodeCode(t.end))) return null;\n        t.code >= o.CODE_G_START && (t.code = t.code - o.CODE_G_START, i |= 1 << 5 - r), e.push(t.code), n.push(t);\n      }\n      return o._determineParity(i, e) ? t : null;\n    }, r.prototype._determineParity = function (t, e) {\n      var n, r;\n      for (r = 0; r < this.CODE_FREQUENCY.length; r++) for (n = 0; n < this.CODE_FREQUENCY[r].length; n++) if (t === this.CODE_FREQUENCY[r][n]) return e.unshift(r), e.push(n), !0;\n      return !1;\n    }, r.prototype._convertToUPCA = function (t) {\n      var e = [t[0]],\n        n = t[t.length - 2];\n      return e = n <= 2 ? e.concat(t.slice(1, 3)).concat([n, 0, 0, 0, 0]).concat(t.slice(3, 6)) : 3 === n ? e.concat(t.slice(1, 4)).concat([0, 0, 0, 0, 0]).concat(t.slice(4, 6)) : 4 === n ? e.concat(t.slice(1, 5)).concat([0, 0, 0, 0, 0, t[5]]) : e.concat(t.slice(1, 6)).concat([0, 0, 0, 0, n]), e.push(t[t.length - 1]), e;\n    }, r.prototype._checksum = function (t) {\n      return o.a.prototype._checksum.call(this, this._convertToUPCA(t));\n    }, r.prototype._findEnd = function (t, e) {\n      return e = !0, o.a.prototype._findEnd.call(this, t, e);\n    }, r.prototype._verifyTrailingWhitespace = function (t) {\n      var e,\n        n = this;\n      if ((e = t.end + (t.end - t.start) / 2) < n._row.length && n._matchRange(t.end, e, 0)) return t;\n    }, e.a = r;\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t, e) {\n      o.a.call(this, t, e);\n    }\n    var o = n(4),\n      i = {\n        FORMAT: {\n          value: \"upc_a\",\n          writeable: !1\n        }\n      };\n    r.prototype = Object.create(o.a.prototype, i), r.prototype.constructor = r, r.prototype._decode = function () {\n      var t = o.a.prototype._decode.call(this);\n      return t && t.code && 13 === t.code.length && \"0\" === t.code.charAt(0) ? (t.code = t.code.substring(1), t) : null;\n    }, e.a = r;\n  }, function (t, e) {\n    function n(t, e) {\n      return t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t;\n    }\n    t.exports = n;\n  }, function (t, e) {\n    function n() {\n      var t = new Float32Array(4);\n      return t[0] = 1, t[1] = 0, t[2] = 0, t[3] = 1, t;\n    }\n    t.exports = n;\n  }, function (t, e) {\n    function n(t, e) {\n      var n = e[0],\n        r = e[1],\n        o = e[2],\n        i = e[3],\n        a = n * i - o * r;\n      return a ? (a = 1 / a, t[0] = i * a, t[1] = -r * a, t[2] = -o * a, t[3] = n * a, t) : null;\n    }\n    t.exports = n;\n  }, function (t, e) {\n    function n(t, e, n) {\n      return t[0] = e[0] * n, t[1] = e[1] * n, t;\n    }\n    t.exports = n;\n  }, function (t, e) {\n    function n(t, e, n) {\n      var r = e[0],\n        o = e[1];\n      return t[0] = n[0] * r + n[2] * o, t[1] = n[1] * r + n[3] * o, t;\n    }\n    t.exports = n;\n  }, function (t, e) {\n    function n(t) {\n      var e = new Float32Array(3);\n      return e[0] = t[0], e[1] = t[1], e[2] = t[2], e;\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t) {\n      var e = -1,\n        n = null == t ? 0 : t.length;\n      for (this.clear(); ++e < n;) {\n        var r = t[e];\n        this.set(r[0], r[1]);\n      }\n    }\n    var o = n(122),\n      i = n(123),\n      a = n(124),\n      u = n(125),\n      c = n(126);\n    r.prototype.clear = o, r.prototype[\"delete\"] = i, r.prototype.get = a, r.prototype.has = u, r.prototype.set = c, t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      var e = this.__data__ = new o(t);\n      this.size = e.size;\n    }\n    var o = n(10),\n      i = n(149),\n      a = n(150),\n      u = n(151),\n      c = n(152),\n      s = n(153);\n    r.prototype.clear = i, r.prototype[\"delete\"] = a, r.prototype.get = u, r.prototype.has = c, r.prototype.set = s, t.exports = r;\n  }, function (t, e, n) {\n    var r = n(5),\n      o = r.Uint8Array;\n    t.exports = o;\n  }, function (t, e) {\n    function n(t, e, n) {\n      switch (n.length) {\n        case 0:\n          return t.call(e);\n        case 1:\n          return t.call(e, n[0]);\n        case 2:\n          return t.call(e, n[0], n[1]);\n        case 3:\n          return t.call(e, n[0], n[1], n[2]);\n      }\n      return t.apply(e, n);\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t, e) {\n      var n = a(t),\n        r = !n && i(t),\n        f = !n && !r && u(t),\n        d = !n && !r && !f && s(t),\n        h = n || r || f || d,\n        p = h ? o(t.length, String) : [],\n        v = p.length;\n      for (var _ in t) !e && !l.call(t, _) || h && (\"length\" == _ || f && (\"offset\" == _ || \"parent\" == _) || d && (\"buffer\" == _ || \"byteLength\" == _ || \"byteOffset\" == _) || c(_, v)) || p.push(_);\n      return p;\n    }\n    var o = n(107),\n      i = n(18),\n      a = n(2),\n      u = n(44),\n      c = n(15),\n      s = n(45),\n      f = Object.prototype,\n      l = f.hasOwnProperty;\n    t.exports = r;\n  }, function (t, e) {\n    function n(t, e) {\n      for (var n = -1, r = null == t ? 0 : t.length, o = Array(r); ++n < r;) o[n] = e(t[n], n, t);\n      return o;\n    }\n    t.exports = n;\n  }, function (t, e) {\n    function n(t, e) {\n      for (var n = -1, r = e.length, o = t.length; ++n < r;) t[o + n] = e[n];\n      return t;\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    var r = n(0),\n      o = Object.create,\n      i = function () {\n        function t() {}\n        return function (e) {\n          if (!r(e)) return {};\n          if (o) return o(e);\n          t.prototype = e;\n          var n = new t();\n          return t.prototype = void 0, n;\n        };\n      }();\n    t.exports = i;\n  }, function (t, e, n) {\n    function r(t, e, n, a, u) {\n      var c = -1,\n        s = t.length;\n      for (n || (n = i), u || (u = []); ++c < s;) {\n        var f = t[c];\n        e > 0 && n(f) ? e > 1 ? r(f, e - 1, n, a, u) : o(u, f) : a || (u[u.length] = f);\n      }\n      return u;\n    }\n    var o = n(90),\n      i = n(128);\n    t.exports = r;\n  }, function (t, e, n) {\n    var r = n(117),\n      o = r();\n    t.exports = o;\n  }, function (t, e, n) {\n    function r(t, e) {\n      e = o(e, t);\n      for (var n = 0, r = e.length; null != t && n < r;) t = t[i(e[n++])];\n      return n && n == r ? t : void 0;\n    }\n    var o = n(13),\n      i = n(23);\n    t.exports = r;\n  }, function (t, e) {\n    function n(t, e) {\n      return null != t && e in Object(t);\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t) {\n      return i(t) && o(t) == a;\n    }\n    var o = n(8),\n      i = n(6),\n      a = \"[object Arguments]\";\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      return !(!a(t) || i(t)) && (o(t) ? p : s).test(u(t));\n    }\n    var o = n(25),\n      i = n(132),\n      a = n(0),\n      u = n(155),\n      c = /[\\\\^$.*+?()[\\]{}|]/g,\n      s = /^\\[object .+?Constructor\\]$/,\n      f = Function.prototype,\n      l = Object.prototype,\n      d = f.toString,\n      h = l.hasOwnProperty,\n      p = RegExp(\"^\" + d.call(h).replace(c, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      return a(t) && i(t.length) && !!u[o(t)];\n    }\n    var o = n(8),\n      i = n(26),\n      a = n(6),\n      u = {};\n    u[\"[object Float32Array]\"] = u[\"[object Float64Array]\"] = u[\"[object Int8Array]\"] = u[\"[object Int16Array]\"] = u[\"[object Int32Array]\"] = u[\"[object Uint8Array]\"] = u[\"[object Uint8ClampedArray]\"] = u[\"[object Uint16Array]\"] = u[\"[object Uint32Array]\"] = !0, u[\"[object Arguments]\"] = u[\"[object Array]\"] = u[\"[object ArrayBuffer]\"] = u[\"[object Boolean]\"] = u[\"[object DataView]\"] = u[\"[object Date]\"] = u[\"[object Error]\"] = u[\"[object Function]\"] = u[\"[object Map]\"] = u[\"[object Number]\"] = u[\"[object Object]\"] = u[\"[object RegExp]\"] = u[\"[object Set]\"] = u[\"[object String]\"] = u[\"[object WeakMap]\"] = !1, t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      if (!o(t)) return a(t);\n      var e = i(t),\n        n = [];\n      for (var r in t) (\"constructor\" != r || !e && c.call(t, r)) && n.push(r);\n      return n;\n    }\n    var o = n(0),\n      i = n(40),\n      a = n(144),\n      u = Object.prototype,\n      c = u.hasOwnProperty;\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e, n, f, l) {\n      t !== e && a(e, function (a, s) {\n        if (c(a)) l || (l = new o()), u(t, e, s, n, r, f, l);else {\n          var d = f ? f(t[s], a, s + \"\", t, e, l) : void 0;\n          void 0 === d && (d = a), i(t, s, d);\n        }\n      }, s);\n    }\n    var o = n(85),\n      i = n(35),\n      a = n(93),\n      u = n(101),\n      c = n(0),\n      s = n(46);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e, n, r, y, m, x) {\n      var b = t[n],\n        E = e[n],\n        C = x.get(E);\n      if (C) return void o(t, n, C);\n      var O = m ? m(b, E, n + \"\", t, e, x) : void 0,\n        A = void 0 === O;\n      if (A) {\n        var R = f(E),\n          w = !R && d(E),\n          T = !R && !w && _(E);\n        O = E, R || w || T ? f(b) ? O = b : l(b) ? O = u(b) : w ? (A = !1, O = i(E, !0)) : T ? (A = !1, O = a(E, !0)) : O = [] : v(E) || s(E) ? (O = b, s(b) ? O = g(b) : (!p(b) || r && h(b)) && (O = c(E))) : A = !1;\n      }\n      A && (x.set(E, O), y(O, E, r, m, x), x[\"delete\"](E)), o(t, n, O);\n    }\n    var o = n(35),\n      i = n(111),\n      a = n(112),\n      u = n(113),\n      c = n(127),\n      s = n(18),\n      f = n(2),\n      l = n(159),\n      d = n(44),\n      h = n(25),\n      p = n(0),\n      v = n(160),\n      _ = n(45),\n      g = n(164);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e) {\n      return o(t, e, function (e, n) {\n        return i(t, n);\n      });\n    }\n    var o = n(103),\n      i = n(158);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e, n) {\n      for (var r = -1, u = e.length, c = {}; ++r < u;) {\n        var s = e[r],\n          f = o(t, s);\n        n(f, s) && i(c, a(s, t), f);\n      }\n      return c;\n    }\n    var o = n(94),\n      i = n(105),\n      a = n(13);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e) {\n      return a(i(t, e, o), t + \"\");\n    }\n    var o = n(43),\n      i = n(41),\n      a = n(42);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e, n, r) {\n      if (!u(t)) return t;\n      e = i(e, t);\n      for (var s = -1, f = e.length, l = f - 1, d = t; null != d && ++s < f;) {\n        var h = c(e[s]),\n          p = n;\n        if (s != l) {\n          var v = d[h];\n          p = r ? r(v, h, d) : void 0, void 0 === p && (p = u(v) ? v : a(e[s + 1]) ? [] : {});\n        }\n        o(d, h, p), d = d[h];\n      }\n      return t;\n    }\n    var o = n(36),\n      i = n(13),\n      a = n(15),\n      u = n(0),\n      c = n(23);\n    t.exports = r;\n  }, function (t, e, n) {\n    var r = n(156),\n      o = n(37),\n      i = n(43),\n      a = o ? function (t, e) {\n        return o(t, \"toString\", {\n          configurable: !0,\n          enumerable: !1,\n          value: r(e),\n          writable: !0\n        });\n      } : i;\n    t.exports = a;\n  }, function (t, e) {\n    function n(t, e) {\n      for (var n = -1, r = Array(t); ++n < t;) r[n] = e(n);\n      return r;\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t) {\n      if (\"string\" == typeof t) return t;\n      if (a(t)) return i(t, r) + \"\";\n      if (u(t)) return f ? f.call(t) : \"\";\n      var e = t + \"\";\n      return \"0\" == e && 1 / t == -c ? \"-0\" : e;\n    }\n    var o = n(11),\n      i = n(89),\n      a = n(2),\n      u = n(27),\n      c = 1 / 0,\n      s = o ? o.prototype : void 0,\n      f = s ? s.toString : void 0;\n    t.exports = r;\n  }, function (t, e) {\n    function n(t) {\n      return function (e) {\n        return t(e);\n      };\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t) {\n      var e = new t.constructor(t.byteLength);\n      return new o(e).set(new o(t)), e;\n    }\n    var o = n(86);\n    t.exports = r;\n  }, function (t, e, n) {\n    (function (t) {\n      function r(t, e) {\n        if (e) return t.slice();\n        var n = t.length,\n          r = s ? s(n) : new t.constructor(n);\n        return t.copy(r), r;\n      }\n      var o = n(5),\n        i = \"object\" == _typeof(e) && e && !e.nodeType && e,\n        a = i && \"object\" == _typeof(t) && t && !t.nodeType && t,\n        u = a && a.exports === i,\n        c = u ? o.Buffer : void 0,\n        s = c ? c.allocUnsafe : void 0;\n      t.exports = r;\n    }).call(e, n(29)(t));\n  }, function (t, e, n) {\n    function r(t, e) {\n      var n = e ? o(t.buffer) : t.buffer;\n      return new t.constructor(n, t.byteOffset, t.length);\n    }\n    var o = n(110);\n    t.exports = r;\n  }, function (t, e) {\n    function n(t, e) {\n      var n = -1,\n        r = t.length;\n      for (e || (e = Array(r)); ++n < r;) e[n] = t[n];\n      return e;\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t, e, n, r) {\n      var a = !n;\n      n || (n = {});\n      for (var u = -1, c = e.length; ++u < c;) {\n        var s = e[u],\n          f = r ? r(n[s], t[s], s, n, t) : void 0;\n        void 0 === f && (f = t[s]), a ? i(n, s, f) : o(n, s, f);\n      }\n      return n;\n    }\n    var o = n(36),\n      i = n(21);\n    t.exports = r;\n  }, function (t, e, n) {\n    var r = n(5),\n      o = r[\"__core-js_shared__\"];\n    t.exports = o;\n  }, function (t, e, n) {\n    function r(t) {\n      return o(function (e, n) {\n        var r = -1,\n          o = n.length,\n          a = o > 1 ? n[o - 1] : void 0,\n          u = o > 2 ? n[2] : void 0;\n        for (a = t.length > 3 && \"function\" == typeof a ? (o--, a) : void 0, u && i(n[0], n[1], u) && (a = o < 3 ? void 0 : a, o = 1), e = Object(e); ++r < o;) {\n          var c = n[r];\n          c && t(e, c, r, a);\n        }\n        return e;\n      });\n    }\n    var o = n(104),\n      i = n(129);\n    t.exports = r;\n  }, function (t, e) {\n    function n(t) {\n      return function (e, n, r) {\n        for (var o = -1, i = Object(e), a = r(e), u = a.length; u--;) {\n          var c = a[t ? u : ++o];\n          if (n(i[c], c, i) === !1) break;\n        }\n        return e;\n      };\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t) {\n      return a(i(t, void 0, o), t + \"\");\n    }\n    var o = n(157),\n      i = n(41),\n      a = n(42);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      var e = a.call(t, c),\n        n = t[c];\n      try {\n        t[c] = void 0;\n        var r = !0;\n      } catch (t) {}\n      var o = u.call(t);\n      return r && (e ? t[c] = n : delete t[c]), o;\n    }\n    var o = n(11),\n      i = Object.prototype,\n      a = i.hasOwnProperty,\n      u = i.toString,\n      c = o ? o.toStringTag : void 0;\n    t.exports = r;\n  }, function (t, e) {\n    function n(t, e) {\n      return null == t ? void 0 : t[e];\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t, e, n) {\n      e = o(e, t);\n      for (var r = -1, f = e.length, l = !1; ++r < f;) {\n        var d = s(e[r]);\n        if (!(l = null != t && n(t, d))) break;\n        t = t[d];\n      }\n      return l || ++r != f ? l : !!(f = null == t ? 0 : t.length) && c(f) && u(d, f) && (a(t) || i(t));\n    }\n    var o = n(13),\n      i = n(18),\n      a = n(2),\n      u = n(15),\n      c = n(26),\n      s = n(23);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r() {\n      this.__data__ = o ? o(null) : {}, this.size = 0;\n    }\n    var o = n(16);\n    t.exports = r;\n  }, function (t, e) {\n    function n(t) {\n      var e = this.has(t) && delete this.__data__[t];\n      return this.size -= e ? 1 : 0, e;\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t) {\n      var e = this.__data__;\n      if (o) {\n        var n = e[t];\n        return n === i ? void 0 : n;\n      }\n      return u.call(e, t) ? e[t] : void 0;\n    }\n    var o = n(16),\n      i = \"__lodash_hash_undefined__\",\n      a = Object.prototype,\n      u = a.hasOwnProperty;\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      var e = this.__data__;\n      return o ? void 0 !== e[t] : a.call(e, t);\n    }\n    var o = n(16),\n      i = Object.prototype,\n      a = i.hasOwnProperty;\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e) {\n      var n = this.__data__;\n      return this.size += this.has(t) ? 0 : 1, n[t] = o && void 0 === e ? i : e, this;\n    }\n    var o = n(16),\n      i = \"__lodash_hash_undefined__\";\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      return \"function\" != typeof t.constructor || a(t) ? {} : o(i(t));\n    }\n    var o = n(91),\n      i = n(39),\n      a = n(40);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      return a(t) || i(t) || !!(u && t && t[u]);\n    }\n    var o = n(11),\n      i = n(18),\n      a = n(2),\n      u = o ? o.isConcatSpreadable : void 0;\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e, n) {\n      if (!u(n)) return !1;\n      var r = _typeof(e);\n      return !!(\"number\" == r ? i(n) && a(e, n.length) : \"string\" == r && e in n) && o(n[e], t);\n    }\n    var o = n(17),\n      i = n(24),\n      a = n(15),\n      u = n(0);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e) {\n      if (o(t)) return !1;\n      var n = _typeof(t);\n      return !(\"number\" != n && \"symbol\" != n && \"boolean\" != n && null != t && !i(t)) || u.test(t) || !a.test(t) || null != e && t in Object(e);\n    }\n    var o = n(2),\n      i = n(27),\n      a = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      u = /^\\w*$/;\n    t.exports = r;\n  }, function (t, e) {\n    function n(t) {\n      var e = _typeof(t);\n      return \"string\" == e || \"number\" == e || \"symbol\" == e || \"boolean\" == e ? \"__proto__\" !== t : null === t;\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t) {\n      return !!i && i in t;\n    }\n    var o = n(115),\n      i = function () {\n        var t = /[^.]+$/.exec(o && o.keys && o.keys.IE_PROTO || \"\");\n        return t ? \"Symbol(src)_1.\" + t : \"\";\n      }();\n    t.exports = r;\n  }, function (t, e) {\n    function n() {\n      this.__data__ = [], this.size = 0;\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t) {\n      var e = this.__data__,\n        n = o(e, t);\n      return !(n < 0) && (n == e.length - 1 ? e.pop() : a.call(e, n, 1), --this.size, !0);\n    }\n    var o = n(12),\n      i = Array.prototype,\n      a = i.splice;\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      var e = this.__data__,\n        n = o(e, t);\n      return n < 0 ? void 0 : e[n][1];\n    }\n    var o = n(12);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      return o(this.__data__, t) > -1;\n    }\n    var o = n(12);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e) {\n      var n = this.__data__,\n        r = o(n, t);\n      return r < 0 ? (++this.size, n.push([t, e])) : n[r][1] = e, this;\n    }\n    var o = n(12);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r() {\n      this.size = 0, this.__data__ = {\n        hash: new o(),\n        map: new (a || i)(),\n        string: new o()\n      };\n    }\n    var o = n(84),\n      i = n(10),\n      a = n(33);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      var e = o(this, t)[\"delete\"](t);\n      return this.size -= e ? 1 : 0, e;\n    }\n    var o = n(14);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      return o(this, t).get(t);\n    }\n    var o = n(14);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      return o(this, t).has(t);\n    }\n    var o = n(14);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e) {\n      var n = o(this, t),\n        r = n.size;\n      return n.set(t, e), this.size += n.size == r ? 0 : 1, this;\n    }\n    var o = n(14);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      var e = o(t, function (t) {\n          return n.size === i && n.clear(), t;\n        }),\n        n = e.cache;\n      return e;\n    }\n    var o = n(161),\n      i = 500;\n    t.exports = r;\n  }, function (t, e) {\n    function n(t) {\n      var e = [];\n      if (null != t) for (var n in Object(t)) e.push(n);\n      return e;\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    (function (t) {\n      var r = n(38),\n        o = \"object\" == _typeof(e) && e && !e.nodeType && e,\n        i = o && \"object\" == _typeof(t) && t && !t.nodeType && t,\n        a = i && i.exports === o,\n        u = a && r.process,\n        c = function () {\n          try {\n            return u && u.binding && u.binding(\"util\");\n          } catch (t) {}\n        }();\n      t.exports = c;\n    }).call(e, n(29)(t));\n  }, function (t, e) {\n    function n(t) {\n      return o.call(t);\n    }\n    var r = Object.prototype,\n      o = r.toString;\n    t.exports = n;\n  }, function (t, e) {\n    function n(t, e) {\n      return function (n) {\n        return t(e(n));\n      };\n    }\n    t.exports = n;\n  }, function (t, e) {\n    function n(t) {\n      var e = 0,\n        n = 0;\n      return function () {\n        var a = i(),\n          u = o - (a - n);\n        if (n = a, u > 0) {\n          if (++e >= r) return arguments[0];\n        } else e = 0;\n        return t.apply(void 0, arguments);\n      };\n    }\n    var r = 800,\n      o = 16,\n      i = Date.now;\n    t.exports = n;\n  }, function (t, e, n) {\n    function r() {\n      this.__data__ = new o(), this.size = 0;\n    }\n    var o = n(10);\n    t.exports = r;\n  }, function (t, e) {\n    function n(t) {\n      var e = this.__data__,\n        n = e[\"delete\"](t);\n      return this.size = e.size, n;\n    }\n    t.exports = n;\n  }, function (t, e) {\n    function n(t) {\n      return this.__data__.get(t);\n    }\n    t.exports = n;\n  }, function (t, e) {\n    function n(t) {\n      return this.__data__.has(t);\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t, e) {\n      var n = this.__data__;\n      if (n instanceof o) {\n        var r = n.__data__;\n        if (!i || r.length < u - 1) return r.push([t, e]), this.size = ++n.size, this;\n        n = this.__data__ = new a(r);\n      }\n      return n.set(t, e), this.size = n.size, this;\n    }\n    var o = n(10),\n      i = n(33),\n      a = n(34),\n      u = 200;\n    t.exports = r;\n  }, function (t, e, n) {\n    var r = n(143),\n      o = /^\\./,\n      i = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n      a = /\\\\(\\\\)?/g,\n      u = r(function (t) {\n        var e = [];\n        return o.test(t) && e.push(\"\"), t.replace(i, function (t, n, r, o) {\n          e.push(r ? o.replace(a, \"$1\") : n || t);\n        }), e;\n      });\n    t.exports = u;\n  }, function (t, e) {\n    function n(t) {\n      if (null != t) {\n        try {\n          return o.call(t);\n        } catch (t) {}\n        try {\n          return t + \"\";\n        } catch (t) {}\n      }\n      return \"\";\n    }\n    var r = Function.prototype,\n      o = r.toString;\n    t.exports = n;\n  }, function (t, e) {\n    function n(t) {\n      return function () {\n        return t;\n      };\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t) {\n      return (null == t ? 0 : t.length) ? o(t, 1) : [];\n    }\n    var o = n(92);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e) {\n      return null != t && i(t, e, o);\n    }\n    var o = n(95),\n      i = n(121);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      return i(t) && o(t);\n    }\n    var o = n(24),\n      i = n(6);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      if (!a(t) || o(t) != u) return !1;\n      var e = i(t);\n      if (null === e) return !0;\n      var n = l.call(e, \"constructor\") && e.constructor;\n      return \"function\" == typeof n && n instanceof n && f.call(n) == d;\n    }\n    var o = n(8),\n      i = n(39),\n      a = n(6),\n      u = \"[object Object]\",\n      c = Function.prototype,\n      s = Object.prototype,\n      f = c.toString,\n      l = s.hasOwnProperty,\n      d = f.call(Object);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t, e) {\n      if (\"function\" != typeof t || null != e && \"function\" != typeof e) throw new TypeError(i);\n      var _n = function n() {\n        var r = arguments,\n          o = e ? e.apply(this, r) : r[0],\n          i = _n.cache;\n        if (i.has(o)) return i.get(o);\n        var a = t.apply(this, r);\n        return _n.cache = i.set(o, a) || i, a;\n      };\n      return _n.cache = new (r.Cache || o)(), _n;\n    }\n    var o = n(34),\n      i = \"Expected a function\";\n    r.Cache = o, t.exports = r;\n  }, function (t, e, n) {\n    var r = n(102),\n      o = n(118),\n      i = o(function (t, e) {\n        return null == t ? {} : r(t, e);\n      });\n    t.exports = i;\n  }, function (t, e) {\n    function n() {\n      return !1;\n    }\n    t.exports = n;\n  }, function (t, e, n) {\n    function r(t) {\n      return o(t, i(t));\n    }\n    var o = n(114),\n      i = n(46);\n    t.exports = r;\n  }, function (t, e, n) {\n    function r(t) {\n      return null == t ? \"\" : o(t);\n    }\n    var o = n(108);\n    t.exports = r;\n  }, function (t, e, n) {\n    t.exports = n(48);\n  }]);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./quaggaJS/dist/quagga.min.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("8a1a680bc04835ee0579")
/******/ })();
/******/ 
/******/ /* webpack/runtime/node module decorator */
/******/ (() => {
/******/ 	__webpack_require__.nmd = (module) => {
/******/ 		module.paths = [];
/******/ 		if (!module.children) module.children = [];
/******/ 		return module;
/******/ 	};
/******/ })();
/******/ 
/******/ }
);