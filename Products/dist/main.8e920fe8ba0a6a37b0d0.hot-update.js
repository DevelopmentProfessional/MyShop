/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatequagga_scanner"]("main",{

/***/ "./Scanner.js":
/*!********************!*\
  !*** ./Scanner.js ***!
  \********************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = \"function\" == typeof Symbol ? Symbol : {}, i = o.iterator || \"@@iterator\", a = o.asyncIterator || \"@@asyncIterator\", u = o.toStringTag || \"@@toStringTag\"; function c(t, r, e, n) { Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, \"\"); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, \"_invoke\", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error(\"Generator is already running\"); if (4 === o) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = 3; var h = s(r, e, n); if (\"normal\" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } \"throw\" === h.type && (o = 4, n.method = \"throw\", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: \"normal\", arg: t.call(r, e) }; } catch (t) { return { type: \"throw\", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { [\"next\", \"throw\", \"return\"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if (\"throw\" !== c.type) { var h = c.arg, f = h.value; return f && \"object\" == _typeof(f) && n.call(f, \"__await\") ? r.resolve(f.__await).then(function (t) { e(\"next\", t, a, u); }, function (t) { e(\"throw\", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e(\"throw\", t, a, u); }); } u(c.arg); } var o; c(this, \"_invoke\", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, \"throw\" === n && r.i[\"return\"] && (e.method = \"return\", e.arg = t, d(r, e), \"throw\" === e.method) || \"return\" !== n && (e.method = \"throw\", e.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), f; var i = s(o, r.i, e.arg); if (\"throw\" === i.type) return e.method = \"throw\", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, \"return\" !== e.method && (e.method = \"next\", e.arg = t), e.delegate = null, f) : a : (e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = \"normal\", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if (\"function\" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, \"constructor\", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), c(GeneratorFunctionPrototype, u, GeneratorFunction.displayName = \"GeneratorFunction\"), r.isGeneratorFunction = function (t) { var r = \"function\" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || \"GeneratorFunction\" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, \"GeneratorFunction\")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, \"Generator\"), c(v, i, function () { return this; }), c(v, \"toString\", function () { return \"[object Generator]\"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) \"t\" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = \"throw\", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n(\"end\"), !1; if (!c && !h) throw Error(\"try statement without catch or finally\"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = \"next\", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && (\"break\" === t || \"continue\" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = \"next\", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, \"catch\": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if (\"throw\" === n.type) { var o = n.arg; m(e); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, \"next\" === this.method && (this.arg = t), f; } }, r; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar FORMAT_TO_READER = {\n  ean_13: \"ean_reader\",\n  ean_8: \"ean_8_reader\",\n  upc_a: \"upc_reader\",\n  upc_e: \"upc_e_reader\",\n  code_128: \"code_128_reader\",\n  code_39: \"code_39_reader\",\n  code_39_vin: \"code_39_vin_reader\",\n  codabar: \"codabar_reader\",\n  i2of5: \"i2of5_reader\",\n  code_93: \"code_93_reader\"\n  // \"2of5\" is not supported by Quagga and should be removed from your select\n};\nvar BarcodeScanner = /*#__PURE__*/function () {\n  function BarcodeScanner() {\n    var _this = this;\n    _classCallCheck(this, BarcodeScanner);\n    this.statusElem = document.getElementById('status');\n    this.resultElem = document.getElementById('result');\n    this.startButton = document.getElementById('startButton');\n    this.stopButton = document.getElementById('stopButton');\n    this.deviceSelect = document.getElementById('deviceSelect');\n    this.formatSelect = document.getElementById('formatSelect');\n    this.isRunning = false;\n    this.startButton.addEventListener('click', function () {\n      return _this.startScanning();\n    });\n    this.stopButton.addEventListener('click', function () {\n      return _this.stopScanning();\n    });\n    this.deviceSelect.addEventListener('change', function () {\n      if (_this.isRunning) {\n        _this.stopScanning();\n        _this.startScanning();\n      }\n    });\n    this.formatSelect.addEventListener('change', function () {\n      if (_this.isRunning) {\n        _this.stopScanning();\n        _this.startScanning();\n      }\n    });\n    this.initializeCameraDevices();\n  }\n  return _createClass(BarcodeScanner, [{\n    key: \"initializeCameraDevices\",\n    value: function () {\n      var _initializeCameraDevices = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        var devices, videoDevices;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.setStatus('Requesting camera access...', 'stripe');\n              _context.prev = 1;\n              _context.next = 4;\n              return navigator.mediaDevices.enumerateDevices();\n            case 4:\n              devices = _context.sent;\n              videoDevices = devices.filter(function (device) {\n                return device.kind === 'videoinput';\n              });\n              this.deviceSelect.innerHTML = '';\n              videoDevices.forEach(function (device, idx) {\n                var option = document.createElement('option');\n                option.value = device.deviceId;\n                option.text = device.label || \"Camera \".concat(idx + 1);\n                _this2.deviceSelect.appendChild(option);\n              });\n              if (videoDevices.length === 0) {\n                this.setStatus('No camera devices found.', 'error');\n                this.startButton.disabled = true;\n              } else {\n                this.setStatus('Ready. Select camera and format.', 'success');\n                this.startButton.disabled = false;\n              }\n              _context.next = 15;\n              break;\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              this.setStatus('Error accessing camera devices.', 'error');\n              this.startButton.disabled = true;\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[1, 11]]);\n      }));\n      function initializeCameraDevices() {\n        return _initializeCameraDevices.apply(this, arguments);\n      }\n      return initializeCameraDevices;\n    }()\n  }, {\n    key: \"startScanning\",\n    value: function startScanning() {\n      var _this3 = this;\n      if (this.isRunning) return;\n      this.setStatus('Starting camera...', 'stripe');\n      this.resultElem.textContent = 'No barcode detected';\n      this.resultElem.className = '';\n      var selectedDeviceId = this.deviceSelect.value;\n      var selectedFormat = this.formatSelect.value;\n\n      // Use the mapping to get the correct reader\n      var reader = FORMAT_TO_READER[selectedFormat];\n      if (!reader) {\n        this.setStatus('Barcode format not supported.', 'error');\n        return;\n      }\n      Quagga.init({\n        inputStream: {\n          type: 'LiveStream',\n          constraints: {\n            width: {\n              min: 640\n            },\n            height: {\n              min: 480\n            },\n            facingMode: 'environment',\n            deviceId: selectedDeviceId ? {\n              exact: selectedDeviceId\n            } : undefined\n          },\n          target: document.getElementById('interactive')\n        },\n        decoder: {\n          readers: [reader]\n        },\n        locate: true\n      }, function (err) {\n        if (err) {\n          _this3.setStatus('Error initializing camera: ' + err.message, 'error');\n          _this3.isRunning = false;\n          return;\n        }\n        Quagga.start();\n        _this3.isRunning = true;\n        _this3.setStatus('Scanning... Point camera at barcode.', 'success');\n        _this3.startButton.disabled = true;\n        _this3.stopButton.disabled = false;\n      });\n      Quagga.onDetected(this.onDetected = function (result) {\n        var code = result.codeResult.code;\n        _this3.resultElem.textContent = \"Detected: \".concat(code);\n        _this3.resultElem.className = 'success';\n        _this3.setStatus('Barcode detected!', 'success');\n      });\n      Quagga.onProcessed(this.onProcessed = function (result) {\n        // Optionally, you can add drawing overlays here\n      });\n    }\n  }, {\n    key: \"stopScanning\",\n    value: function stopScanning() {\n      if (!this.isRunning) return;\n      Quagga.stop();\n      Quagga.offDetected(this.onDetected);\n      Quagga.offProcessed(this.onProcessed);\n      this.isRunning = false;\n      this.setStatus('Camera stopped.', 'stripe');\n      this.startButton.disabled = false;\n      this.stopButton.disabled = true;\n    }\n  }, {\n    key: \"setStatus\",\n    value: function setStatus(msg, type) {\n      this.statusElem.textContent = msg;\n      this.statusElem.className = type ? type : '';\n    }\n  }]);\n}();\ndocument.addEventListener('DOMContentLoaded', function () {\n  new BarcodeScanner();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Scanner.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("399a481a17a04d44dd3e")
/******/ })();
/******/ 
/******/ }
);